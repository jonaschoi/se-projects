openapi: 3.0.1
info:
  title: Headless Delivery
  description: A Java client JAR is available for use with the group ID 'com.liferay',
    artifact ID 'com.liferay.headless.delivery.client', and version '1.0.0'.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: v1.0
paths:
  /v1.0/blog-posting-images/{blogPostingImageId}:
    get:
      tags:
      - BlogPostingImage
      description: Retrieves the blog post's image. The binary image is returned as
        a relative URL to the image itself.
      operationId: getBlogPostingImage
      parameters:
      - name: blogPostingImageId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPostingImage'
            application/xml:
              schema:
                $ref: '#/components/schemas/BlogPostingImage'
    delete:
      tags:
      - BlogPostingImage
      description: Deletes the blog post's image.
      operationId: deleteBlogPostingImage
      parameters:
      - name: blogPostingImageId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
            application/xml: {}
  /v1.0/sites/{siteId}/blog-posting-images:
    get:
      tags:
      - BlogPostingImage
      description: Retrieves the site's blog post images. Results can be paginated,
        filtered, searched, and sorted.
      operationId: getSiteBlogPostingImagesPage
      parameters:
      - name: siteId
        in: path
        required: true
        schema:
          type: string
      - name: search
        in: query
        schema:
          type: string
      - name: filter
        in: query
        schema:
          type: string
      - name: page
        in: query
        schema:
          type: string
      - name: pageSize
        in: query
        schema:
          type: string
      - name: sort
        in: query
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageBlogPostingImage'
            application/xml:
              schema:
                $ref: '#/components/schemas/PageBlogPostingImage'
    post:
      tags:
      - BlogPostingImage
      description: Creates a blog post image. The request body must be `multipart/form-data`
        with two parts, the file's bytes (`file`), and an optional JSON string (`blogPostingImage`)
        with the metadata.
      operationId: postSiteBlogPostingImage
      parameters:
      - name: siteId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MultipartBody'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPostingImage'
            application/xml:
              schema:
                $ref: '#/components/schemas/BlogPostingImage'
  /v1.0/blog-posting-images/batch:
    delete:
      tags:
      - BlogPostingImage
      operationId: deleteBlogPostingImageBatch
      parameters:
      - name: callbackURL
        in: query
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1.0/sites/{siteId}/blog-posting-images/batch:
    post:
      tags:
      - BlogPostingImage
      operationId: postSiteBlogPostingImageBatch
      parameters:
      - name: siteId
        in: path
        required: true
        schema:
          type: string
      - name: callbackURL
        in: query
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MultipartBody'
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1.0/blog-postings/{blogPostingId}/my-rating:
    get:
      tags:
      - BlogPosting
      description: Retrieves the blog post rating of the user who authenticated the
        request.
      operationId: getBlogPostingMyRating
      parameters:
      - name: blogPostingId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rating'
            application/xml:
              schema:
                $ref: '#/components/schemas/Rating'
    put:
      tags:
      - BlogPosting
      description: Replaces an existing blog post rating by the user who authenticated
        the request.
      operationId: putBlogPostingMyRating
      parameters:
      - name: blogPostingId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rating'
          application/xml:
            schema:
              $ref: '#/components/schemas/Rating'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rating'
            application/xml:
              schema:
                $ref: '#/components/schemas/Rating'
    post:
      tags:
      - BlogPosting
      description: Creates a new blog post rating by the user who authenticated the
        request.
      operationId: postBlogPostingMyRating
      parameters:
      - name: blogPostingId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rating'
          application/xml:
            schema:
              $ref: '#/components/schemas/Rating'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rating'
            application/xml:
              schema:
                $ref: '#/components/schemas/Rating'
    delete:
      tags:
      - BlogPosting
      description: Deletes the blog post rating of the user who authenticated the
        request.
      operationId: deleteBlogPostingMyRating
      parameters:
      - name: blogPostingId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
            application/xml: {}
  /v1.0/sites/{siteId}/blog-postings:
    get:
      tags:
      - BlogPosting
      description: Retrieves the site's blog postings. Results can be paginated, filtered,
        searched, and sorted.
      operationId: getSiteBlogPostingsPage
      parameters:
      - name: siteId
        in: path
        required: true
        schema:
          type: string
      - name: search
        in: query
        schema:
          type: string
      - name: filter
        in: query
        schema:
          type: string
      - name: page
        in: query
        schema:
          type: string
      - name: pageSize
        in: query
        schema:
          type: string
      - name: sort
        in: query
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageBlogPosting'
            application/xml:
              schema:
                $ref: '#/components/schemas/PageBlogPosting'
    post:
      tags:
      - BlogPosting
      description: Creates a new blog post.
      operationId: postSiteBlogPosting
      parameters:
      - name: siteId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlogPosting'
          application/xml:
            schema:
              $ref: '#/components/schemas/BlogPosting'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPosting'
            application/xml:
              schema:
                $ref: '#/components/schemas/BlogPosting'
  /v1.0/blog-postings/{blogPostingId}:
    get:
      tags:
      - BlogPosting
      description: Retrieves the blog post.
      operationId: getBlogPosting
      parameters:
      - name: blogPostingId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPosting'
            application/xml:
              schema:
                $ref: '#/components/schemas/BlogPosting'
    put:
      tags:
      - BlogPosting
      description: Replaces the blog post with the information sent in the request
        body. Any missing fields are deleted, unless they are required.
      operationId: putBlogPosting
      parameters:
      - name: blogPostingId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlogPosting'
          application/xml:
            schema:
              $ref: '#/components/schemas/BlogPosting'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPosting'
            application/xml:
              schema:
                $ref: '#/components/schemas/BlogPosting'
    delete:
      tags:
      - BlogPosting
      description: Deletes the blog post and returns a 204 if the operation succeeds.
      operationId: deleteBlogPosting
      parameters:
      - name: blogPostingId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
            application/xml: {}
    patch:
      tags:
      - BlogPosting
      description: Updates the blog post using only the fields received in the request
        body. Any other fields are left untouched. Returns the updated blog post.
      operationId: patchBlogPosting
      parameters:
      - name: blogPostingId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlogPosting'
          application/xml:
            schema:
              $ref: '#/components/schemas/BlogPosting'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPosting'
            application/xml:
              schema:
                $ref: '#/components/schemas/BlogPosting'
  /v1.0/sites/{siteId}/blog-postings/subscribe:
    put:
      tags:
      - BlogPosting
      operationId: putSiteBlogPostingSubscribe
      parameters:
      - name: siteId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
            application/xml: {}
  /v1.0/sites/{siteId}/blog-postings/unsubscribe:
    put:
      tags:
      - BlogPosting
      operationId: putSiteBlogPostingUnsubscribe
      parameters:
      - name: siteId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
            application/xml: {}
  /v1.0/blog-postings/batch:
    put:
      tags:
      - BlogPosting
      operationId: putBlogPostingBatch
      parameters:
      - name: callbackURL
        in: query
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        default:
          description: default response
          content:
            application/json: {}
    delete:
      tags:
      - BlogPosting
      operationId: deleteBlogPostingBatch
      parameters:
      - name: callbackURL
        in: query
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1.0/sites/{siteId}/blog-postings/batch:
    post:
      tags:
      - BlogPosting
      operationId: postSiteBlogPostingBatch
      parameters:
      - name: siteId
        in: path
        required: true
        schema:
          type: string
      - name: callbackURL
        in: query
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1.0/comments/{commentId}:
    get:
      tags:
      - Comment
      description: Retrieves the comment.
      operationId: getComment
      parameters:
      - name: commentId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
            application/xml:
              schema:
                $ref: '#/components/schemas/Comment'
    put:
      tags:
      - Comment
      description: Replaces the comment with the information sent in the request body.
        Any missing fields are deleted, unless they are required.
      operationId: putComment
      parameters:
      - name: commentId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
          application/xml:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
            application/xml:
              schema:
                $ref: '#/components/schemas/Comment'
    delete:
      tags:
      - Comment
      description: Deletes the comment and returns a 204 if the operation succeeded.
      operationId: deleteComment
      parameters:
      - name: commentId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
            application/xml: {}
  /v1.0/blog-postings/{blogPostingId}/comments:
    get:
      tags:
      - Comment
      description: Retrieves the blog post's comments in a list. Results can be paginated,
        filtered, searched, and sorted.
      operationId: getBlogPostingCommentsPage
      parameters:
      - name: blogPostingId
        in: path
        required: true
        schema:
          type: string
      - name: search
        in: query
        schema:
          type: string
      - name: filter
        in: query
        schema:
          type: string
      - name: page
        in: query
        schema:
          type: string
      - name: pageSize
        in: query
        schema:
          type: string
      - name: sort
        in: query
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageComment'
            application/xml:
              schema:
                $ref: '#/components/schemas/PageComment'
    post:
      tags:
      - Comment
      description: Creates a new comment on the blog post.
      operationId: postBlogPostingComment
      parameters:
      - name: blogPostingId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
          application/xml:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
            application/xml:
              schema:
                $ref: '#/components/schemas/Comment'
  /v1.0/comments/{parentCommentId}/comments:
    get:
      tags:
      - Comment
      description: Retrieves the parent comment's child comments. Results can be paginated,
        filtered, searched, and sorted.
      operationId: getCommentCommentsPage
      parameters:
      - name: parentCommentId
        in: path
        required: true
        schema:
          type: string
      - name: search
        in: query
        schema:
          type: string
      - name: filter
        in: query
        schema:
          type: string
      - name: page
        in: query
        schema:
          type: string
      - name: pageSize
        in: query
        schema:
          type: string
      - name: sort
        in: query
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageComment'
            application/xml:
              schema:
                $ref: '#/components/schemas/PageComment'
    post:
      tags:
      - Comment
      description: Creates a new child comment of the existing comment.
      operationId: postCommentComment
      parameters:
      - name: parentCommentId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
          application/xml:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
            application/xml:
              schema:
                $ref: '#/components/schemas/Comment'
  /v1.0/documents/{documentId}/comments:
    get:
      tags:
      - Comment
      description: Retrieves the document's comments. Results can be paginated, filtered,
        searched, and sorted.
      operationId: getDocumentCommentsPage
      parameters:
      - name: documentId
        in: path
        required: true
        schema:
          type: string
      - name: search
        in: query
        schema:
          type: string
      - name: filter
        in: query
        schema:
          type: string
      - name: page
        in: query
        schema:
          type: string
      - name: pageSize
        in: query
        schema:
          type: string
      - name: sort
        in: query
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageComment'
            application/xml:
              schema:
                $ref: '#/components/schemas/PageComment'
    post:
      tags:
      - Comment
      description: Creates a new comment on the document.
      operationId: postDocumentComment
      parameters:
      - name: documentId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
          application/xml:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
            application/xml:
              schema:
                $ref: '#/components/schemas/Comment'
  /v1.0/structured-contents/{structuredContentId}/comments:
    get:
      tags:
      - Comment
      description: Retrieves the structured content's comments. Results can be paginated,
        filtered, searched, and sorted.
      operationId: getStructuredContentCommentsPage
      parameters:
      - name: structuredContentId
        in: path
        required: true
        schema:
          type: string
      - name: search
        in: query
        schema:
          type: string
      - name: filter
        in: query
        schema:
          type: string
      - name: page
        in: query
        schema:
          type: string
      - name: pageSize
        in: query
        schema:
          type: string
      - name: sort
        in: query
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageComment'
            application/xml:
              schema:
                $ref: '#/components/schemas/PageComment'
    post:
      tags:
      - Comment
      description: Creates a new comment on the structured content.
      operationId: postStructuredContentComment
      parameters:
      - name: structuredContentId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
          application/xml:
            schema:
              $ref: '#/components/schemas/Comment'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
            application/xml:
              schema:
                $ref: '#/components/schemas/Comment'
  /v1.0/blog-postings/{blogPostingId}/comments/batch:
    post:
      tags:
      - Comment
      operationId: postBlogPostingCommentBatch
      parameters:
      - name: blogPostingId
        in: path
        required: true
        schema:
          type: string
      - name: callbackURL
        in: query
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1.0/comments/batch:
    put:
      tags:
      - Comment
      operationId: putCommentBatch
      parameters:
      - name: callbackURL
        in: query
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        default:
          description: default response
          content:
            application/json: {}
    delete:
      tags:
      - Comment
      operationId: deleteCommentBatch
      parameters:
      - name: callbackURL
        in: query
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1.0/documents/{documentId}/comments/batch:
    post:
      tags:
      - Comment
      operationId: postDocumentCommentBatch
      parameters:
      - name: documentId
        in: path
        required: true
        schema:
          type: string
      - name: callbackURL
        in: query
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1.0/structured-contents/{structuredContentId}/comments/batch:
    post:
      tags:
      - Comment
      operationId: postStructuredContentCommentBatch
      parameters:
      - name: structuredContentId
        in: path
        required: true
        schema:
          type: string
      - name: callbackURL
        in: query
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1.0/content-sets/{contentSetId}/content-set-elements:
    get:
      tags:
      - ContentSetElement
      description: 'Retrieves the content set''s elements (e.g., structured content,
        blogs, etc.). Results can be paginated. The set of available headers are:
        Accept-Language (string), Host (string), User-Agent (string), X-Browser (string),
        X-Cookies (collection string), X-Device-Brand (string), X-Device-Model (string),
        X-Device-Screen-Resolution-Height (double), X-Device-Screen-Resolution-Width
        (double), X-Last-Sign-In-Date-Time (date time) and X-Signed-In (boolean).
        Local date will be always present in the request.'
      operationId: getContentSetContentSetElementsPage
      parameters:
      - name: contentSetId
        in: path
        required: true
        schema:
          type: string
      - name: page
        in: query
        schema:
          type: string
      - name: pageSize
        in: query
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageContentSetElement'
            application/xml:
              schema:
                $ref: '#/components/schemas/PageContentSetElement'
  /v1.0/sites/{siteId}/content-sets/by-key/{key}/content-set-elements:
    get:
      tags:
      - ContentSetElement
      description: Retrieves the content set elements by key. Results can be paginated.
      operationId: getSiteContentSetByKeyContentSetElementsPage
      parameters:
      - name: siteId
        in: path
        required: true
        schema:
          type: string
      - name: key
        in: path
        required: true
        schema:
          type: string
      - name: page
        in: query
        schema:
          type: string
      - name: pageSize
        in: query
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageContentSetElement'
            application/xml:
              schema:
                $ref: '#/components/schemas/PageContentSetElement'
  /v1.0/sites/{siteId}/content-sets/by-uuid/{uuid}/content-set-elements:
    get:
      tags:
      - ContentSetElement
      description: Retrieves the content set elements by UUID. Results can be paginated.
      operationId: getSiteContentSetByUuidContentSetElementsPage
      parameters:
      - name: siteId
        in: path
        required: true
        schema:
          type: string
      - name: uuid
        in: path
        required: true
        schema:
          type: string
      - name: page
        in: query
        schema:
          type: string
      - name: pageSize
        in: query
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageContentSetElement'
            application/xml:
              schema:
                $ref: '#/components/schemas/PageContentSetElement'
  /v1.0/content-structures/{contentStructureId}:
    get:
      tags:
      - ContentStructure
      description: Retrieves the content structure.
      operationId: getContentStructure
      parameters:
      - name: contentStructureId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentStructure'
            application/xml:
              schema:
                $ref: '#/components/schemas/ContentStructure'
  /v1.0/sites/{siteId}/content-structures:
    get:
      tags:
      - ContentStructure
      description: Retrieves the site's content structures. Results can be paginated,
        filtered, searched, and sorted.
      operationId: getSiteContentStructuresPage
      parameters:
      - name: siteId
        in: path
        required: true
        schema:
          type: string
      - name: search
        in: query
        schema:
          type: string
      - name: filter
        in: query
        schema:
          type: string
      - name: page
        in: query
        schema:
          type: string
      - name: pageSize
        in: query
        schema:
          type: string
      - name: sort
        in: query
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageContentStructure'
            application/xml:
              schema:
                $ref: '#/components/schemas/PageContentStructure'
  /v1.0/document-folders/{documentFolderId}:
    get:
      tags:
      - DocumentFolder
      description: Retrieves the document folder.
      operationId: getDocumentFolder
      parameters:
      - name: documentFolderId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentFolder'
            application/xml:
              schema:
                $ref: '#/components/schemas/DocumentFolder'
    put:
      tags:
      - DocumentFolder
      description: Replaces the document folder with the information sent in the request
        body. Any missing fields are deleted, unless they are required.
      operationId: putDocumentFolder
      parameters:
      - name: documentFolderId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentFolder'
          application/xml:
            schema:
              $ref: '#/components/schemas/DocumentFolder'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentFolder'
            application/xml:
              schema:
                $ref: '#/components/schemas/DocumentFolder'
    delete:
      tags:
      - DocumentFolder
      description: Deletes the document folder and returns a 204 if the operation
        succeeds.
      operationId: deleteDocumentFolder
      parameters:
      - name: documentFolderId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
            application/xml: {}
    patch:
      tags:
      - DocumentFolder
      description: Updates only the fields received in the request body. Any other
        fields are left untouched.
      operationId: patchDocumentFolder
      parameters:
      - name: documentFolderId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentFolder'
          application/xml:
            schema:
              $ref: '#/components/schemas/DocumentFolder'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentFolder'
            application/xml:
              schema:
                $ref: '#/components/schemas/DocumentFolder'
  /v1.0/document-folders/{parentDocumentFolderId}/document-folders:
    get:
      tags:
      - DocumentFolder
      description: Retrieves the folder's subfolders. Results can be paginated, filtered,
        searched, and sorted.
      operationId: getDocumentFolderDocumentFoldersPage
      parameters:
      - name: parentDocumentFolderId
        in: path
        required: true
        schema:
          type: string
      - name: flatten
        in: query
        schema:
          type: string
      - name: search
        in: query
        schema:
          type: string
      - name: filter
        in: query
        schema:
          type: string
      - name: page
        in: query
        schema:
          type: string
      - name: pageSize
        in: query
        schema:
          type: string
      - name: sort
        in: query
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageDocumentFolder'
            application/xml:
              schema:
                $ref: '#/components/schemas/PageDocumentFolder'
    post:
      tags:
      - DocumentFolder
      description: Creates a new folder in a folder identified by `parentDocumentFolderId`.
      operationId: postDocumentFolderDocumentFolder
      parameters:
      - name: parentDocumentFolderId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentFolder'
          application/xml:
            schema:
              $ref: '#/components/schemas/DocumentFolder'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentFolder'
            application/xml:
              schema:
                $ref: '#/components/schemas/DocumentFolder'
  /v1.0/sites/{siteId}/document-folders:
    get:
      tags:
      - DocumentFolder
      description: Retrieves the site's document folders. Results can be paginated,
        filtered, searched, flattened, and sorted.
      operationId: getSiteDocumentFoldersPage
      parameters:
      - name: siteId
        in: path
        required: true
        schema:
          type: string
      - name: flatten
        in: query
        schema:
          type: string
      - name: search
        in: query
        schema:
          type: string
      - name: filter
        in: query
        schema:
          type: string
      - name: page
        in: query
        schema:
          type: string
      - name: pageSize
        in: query
        schema:
          type: string
      - name: sort
        in: query
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageDocumentFolder'
            application/xml:
              schema:
                $ref: '#/components/schemas/PageDocumentFolder'
    post:
      tags:
      - DocumentFolder
      description: Creates a new document folder.
      operationId: postSiteDocumentFolder
      parameters:
      - name: siteId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentFolder'
          application/xml:
            schema:
              $ref: '#/components/schemas/DocumentFolder'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentFolder'
            application/xml:
              schema:
                $ref: '#/components/schemas/DocumentFolder'
  /v1.0/document-folders/{documentFolderId}/subscribe:
    put:
      tags:
      - DocumentFolder
      operationId: putDocumentFolderSubscribe
      parameters:
      - name: documentFolderId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
            application/xml: {}
  /v1.0/document-folders/{documentFolderId}/unsubscribe:
    put:
      tags:
      - DocumentFolder
      operationId: putDocumentFolderUnsubscribe
      parameters:
      - name: documentFolderId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
            application/xml: {}
  /v1.0/document-folders/batch:
    put:
      tags:
      - DocumentFolder
      operationId: putDocumentFolderBatch
      parameters:
      - name: callbackURL
        in: query
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        default:
          description: default response
          content:
            application/json: {}
    delete:
      tags:
      - DocumentFolder
      operationId: deleteDocumentFolderBatch
      parameters:
      - name: callbackURL
        in: query
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1.0/sites/{siteId}/document-folders/batch:
    post:
      tags:
      - DocumentFolder
      operationId: postSiteDocumentFolderBatch
      parameters:
      - name: siteId
        in: path
        required: true
        schema:
          type: string
      - name: callbackURL
        in: query
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1.0/documents/{documentId}:
    get:
      tags:
      - Document
      description: Retrieves the document.
      operationId: getDocument
      parameters:
      - name: documentId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
            application/xml:
              schema:
                $ref: '#/components/schemas/Document'
    put:
      tags:
      - Document
      description: Replaces the document with the information sent in the request
        body. Any missing fields are deleted, unless they are required. The request
        body must be `multipart/form-data` with two parts, the file's bytes (`file`),
        and an optional JSON string (`document`) with the metadata.
      operationId: putDocument
      parameters:
      - name: documentId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MultipartBody'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
            application/xml:
              schema:
                $ref: '#/components/schemas/Document'
    delete:
      tags:
      - Document
      description: Deletes the document and returns a 204 if the operation succeeds.
      operationId: deleteDocument
      parameters:
      - name: documentId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
            application/xml: {}
    patch:
      tags:
      - Document
      description: Updates only the fields received in the request body, leaving any
        other fields untouched. The request body must be `multipart/form-data` with
        two parts, the file's bytes (`file`), and an optional JSON string (`document`)
        with the metadata.
      operationId: patchDocument
      parameters:
      - name: documentId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MultipartBody'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
            application/xml:
              schema:
                $ref: '#/components/schemas/Document'
  /v1.0/documents/{documentId}/my-rating:
    get:
      tags:
      - Document
      description: Retrieves the document's rating.
      operationId: getDocumentMyRating
      parameters:
      - name: documentId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rating'
            application/xml:
              schema:
                $ref: '#/components/schemas/Rating'
    put:
      tags:
      - Document
      description: Replaces the rating with the information sent in the request body.
        Any missing fields are deleted, unless they are required.
      operationId: putDocumentMyRating
      parameters:
      - name: documentId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rating'
          application/xml:
            schema:
              $ref: '#/components/schemas/Rating'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rating'
            application/xml:
              schema:
                $ref: '#/components/schemas/Rating'
    post:
      tags:
      - Document
      description: Creates a new rating for the document, by the user who authenticated
        the request.
      operationId: postDocumentMyRating
      parameters:
      - name: documentId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rating'
          application/xml:
            schema:
              $ref: '#/components/schemas/Rating'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rating'
            application/xml:
              schema:
                $ref: '#/components/schemas/Rating'
    delete:
      tags:
      - Document
      description: Deletes the document's rating and returns a 204 if the operation
        succeeded.
      operationId: deleteDocumentMyRating
      parameters:
      - name: documentId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
            application/xml: {}
  /v1.0/document-folders/{documentFolderId}/documents:
    get:
      tags:
      - Document
      description: Retrieves the folder's documents. Results can be paginated, filtered,
        searched, and sorted.
      operationId: getDocumentFolderDocumentsPage
      parameters:
      - name: documentFolderId
        in: path
        required: true
        schema:
          type: string
      - name: flatten
        in: query
        schema:
          type: string
      - name: search
        in: query
        schema:
          type: string
      - name: filter
        in: query
        schema:
          type: string
      - name: page
        in: query
        schema:
          type: string
      - name: pageSize
        in: query
        schema:
          type: string
      - name: sort
        in: query
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageDocument'
            application/xml:
              schema:
                $ref: '#/components/schemas/PageDocument'
    post:
      tags:
      - Document
      description: Creates a new document inside the folder identified by `documentFolderId`.
        The request body must be `multipart/form-data` with two parts, the file's
        bytes (`file`), and an optional JSON string (`document`) with the metadata.
      operationId: postDocumentFolderDocument
      parameters:
      - name: documentFolderId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MultipartBody'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
            application/xml:
              schema:
                $ref: '#/components/schemas/Document'
  /v1.0/sites/{siteId}/documents:
    get:
      tags:
      - Document
      description: Retrieves the documents in the site's root folder. Results can
        be paginated, filtered, searched, flattened, and sorted.
      operationId: getSiteDocumentsPage
      parameters:
      - name: siteId
        in: path
        required: true
        schema:
          type: string
      - name: flatten
        in: query
        schema:
          type: string
      - name: search
        in: query
        schema:
          type: string
      - name: filter
        in: query
        schema:
          type: string
      - name: page
        in: query
        schema:
          type: string
      - name: pageSize
        in: query
        schema:
          type: string
      - name: sort
        in: query
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageDocument'
            application/xml:
              schema:
                $ref: '#/components/schemas/PageDocument'
    post:
      tags:
      - Document
      description: Creates a new document. The request body must be `multipart/form-data`
        with two parts, the file's bytes (`file`), and an optional JSON string (`document`)
        with the metadata.
      operationId: postSiteDocument
      parameters:
      - name: siteId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MultipartBody'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
            application/xml:
              schema:
                $ref: '#/components/schemas/Document'
  /v1.0/sites/{siteId}/documents/batch:
    post:
      tags:
      - Document
      operationId: postSiteDocumentBatch
      parameters:
      - name: siteId
        in: path
        required: true
        schema:
          type: string
      - name: callbackURL
        in: query
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MultipartBody'
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1.0/document-folders/{documentFolderId}/documents/batch:
    post:
      tags:
      - Document
      operationId: postDocumentFolderDocumentBatch
      parameters:
      - name: documentFolderId
        in: path
        required: true
        schema:
          type: string
      - name: callbackURL
        in: query
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MultipartBody'
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1.0/documents/batch:
    put:
      tags:
      - Document
      operationId: putDocumentBatch
      parameters:
      - name: callbackURL
        in: query
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MultipartBody'
      responses:
        default:
          description: default response
          content:
            application/json: {}
    delete:
      tags:
      - Document
      operationId: deleteDocumentBatch
      parameters:
      - name: callbackURL
        in: query
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1.0/knowledge-base-articles/{knowledgeBaseArticleId}:
    get:
      tags:
      - KnowledgeBaseArticle
      description: Retrieves the knowledge base article.
      operationId: getKnowledgeBaseArticle
      parameters:
      - name: knowledgeBaseArticleId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KnowledgeBaseArticle'
            application/xml:
              schema:
                $ref: '#/components/schemas/KnowledgeBaseArticle'
    put:
      tags:
      - KnowledgeBaseArticle
      description: Replaces the knowledge base article with the information sent in
        the request body. Any missing fields are deleted, unless they are required.
      operationId: putKnowledgeBaseArticle
      parameters:
      - name: knowledgeBaseArticleId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KnowledgeBaseArticle'
          application/xml:
            schema:
              $ref: '#/components/schemas/KnowledgeBaseArticle'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KnowledgeBaseArticle'
            application/xml:
              schema:
                $ref: '#/components/schemas/KnowledgeBaseArticle'
    delete:
      tags:
      - KnowledgeBaseArticle
      description: Deletes the knowledge base article and returns a 204 if the operation
        succeeds.
      operationId: deleteKnowledgeBaseArticle
      parameters:
      - name: knowledgeBaseArticleId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
            application/xml: {}
    patch:
      tags:
      - KnowledgeBaseArticle
      description: Updates only the fields received in the request body, leaving any
        other fields untouched.
      operationId: patchKnowledgeBaseArticle
      parameters:
      - name: knowledgeBaseArticleId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KnowledgeBaseArticle'
          application/xml:
            schema:
              $ref: '#/components/schemas/KnowledgeBaseArticle'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KnowledgeBaseArticle'
            application/xml:
              schema:
                $ref: '#/components/schemas/KnowledgeBaseArticle'
  /v1.0/knowledge-base-articles/{knowledgeBaseArticleId}/my-rating:
    get:
      tags:
      - KnowledgeBaseArticle
      description: Retrieves the knowledge base article's rating.
      operationId: getKnowledgeBaseArticleMyRating
      parameters:
      - name: knowledgeBaseArticleId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rating'
            application/xml:
              schema:
                $ref: '#/components/schemas/Rating'
    put:
      tags:
      - KnowledgeBaseArticle
      description: Replaces the rating with the information sent in the request body.
        Any missing fields are deleted, unless they are required.
      operationId: putKnowledgeBaseArticleMyRating
      parameters:
      - name: knowledgeBaseArticleId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rating'
          application/xml:
            schema:
              $ref: '#/components/schemas/Rating'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rating'
            application/xml:
              schema:
                $ref: '#/components/schemas/Rating'
    post:
      tags:
      - KnowledgeBaseArticle
      description: Creates a rating for the knowledge base article.
      operationId: postKnowledgeBaseArticleMyRating
      parameters:
      - name: knowledgeBaseArticleId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rating'
          application/xml:
            schema:
              $ref: '#/components/schemas/Rating'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rating'
            application/xml:
              schema:
                $ref: '#/components/schemas/Rating'
    delete:
      tags:
      - KnowledgeBaseArticle
      description: Deletes the knowledge base article's rating and returns a 204 if
        the operation succeeds.
      operationId: deleteKnowledgeBaseArticleMyRating
      parameters:
      - name: knowledgeBaseArticleId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
            application/xml: {}
  /v1.0/knowledge-base-articles/{parentKnowledgeBaseArticleId}/knowledge-base-articles:
    get:
      tags:
      - KnowledgeBaseArticle
      description: Retrieves the parent knowledge base article's child knowledge base
        articles. Results can be paginated, filtered, searched, and sorted.
      operationId: getKnowledgeBaseArticleKnowledgeBaseArticlesPage
      parameters:
      - name: parentKnowledgeBaseArticleId
        in: path
        required: true
        schema:
          type: string
      - name: search
        in: query
        schema:
          type: string
      - name: filter
        in: query
        schema:
          type: string
      - name: page
        in: query
        schema:
          type: string
      - name: pageSize
        in: query
        schema:
          type: string
      - name: sort
        in: query
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageKnowledgeBaseArticle'
            application/xml:
              schema:
                $ref: '#/components/schemas/PageKnowledgeBaseArticle'
    post:
      tags:
      - KnowledgeBaseArticle
      description: Creates a child knowledge base article of the knowledge base article
        identified by `parentKnowledgeBaseArticleId`.
      operationId: postKnowledgeBaseArticleKnowledgeBaseArticle
      parameters:
      - name: parentKnowledgeBaseArticleId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KnowledgeBaseArticle'
          application/xml:
            schema:
              $ref: '#/components/schemas/KnowledgeBaseArticle'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KnowledgeBaseArticle'
            application/xml:
              schema:
                $ref: '#/components/schemas/KnowledgeBaseArticle'
  /v1.0/knowledge-base-folders/{knowledgeBaseFolderId}/knowledge-base-articles:
    get:
      tags:
      - KnowledgeBaseArticle
      description: Retrieves the folder's knowledge base articles. Results can be
        paginated, filtered, searched, flattened, and sorted.
      operationId: getKnowledgeBaseFolderKnowledgeBaseArticlesPage
      parameters:
      - name: knowledgeBaseFolderId
        in: path
        required: true
        schema:
          type: string
      - name: flatten
        in: query
        schema:
          type: string
      - name: search
        in: query
        schema:
          type: string
      - name: filter
        in: query
        schema:
          type: string
      - name: page
        in: query
        schema:
          type: string
      - name: pageSize
        in: query
        schema:
          type: string
      - name: sort
        in: query
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageKnowledgeBaseArticle'
            application/xml:
              schema:
                $ref: '#/components/schemas/PageKnowledgeBaseArticle'
    post:
      tags:
      - KnowledgeBaseArticle
      description: Creates a new knowledge base article in the folder.
      operationId: postKnowledgeBaseFolderKnowledgeBaseArticle
      parameters:
      - name: knowledgeBaseFolderId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KnowledgeBaseArticle'
          application/xml:
            schema:
              $ref: '#/components/schemas/KnowledgeBaseArticle'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KnowledgeBaseArticle'
            application/xml:
              schema:
                $ref: '#/components/schemas/KnowledgeBaseArticle'
  /v1.0/sites/{siteId}/knowledge-base-articles:
    get:
      tags:
      - KnowledgeBaseArticle
      description: Retrieves the site's knowledge base articles. Results can be paginated,
        filtered, searched, flattened, and sorted.
      operationId: getSiteKnowledgeBaseArticlesPage
      parameters:
      - name: siteId
        in: path
        required: true
        schema:
          type: string
      - name: flatten
        in: query
        schema:
          type: string
      - name: search
        in: query
        schema:
          type: string
      - name: filter
        in: query
        schema:
          type: string
      - name: page
        in: query
        schema:
          type: string
      - name: pageSize
        in: query
        schema:
          type: string
      - name: sort
        in: query
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageKnowledgeBaseArticle'
            application/xml:
              schema:
                $ref: '#/components/schemas/PageKnowledgeBaseArticle'
    post:
      tags:
      - KnowledgeBaseArticle
      description: Creates a new knowledge base article.
      operationId: postSiteKnowledgeBaseArticle
      parameters:
      - name: siteId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KnowledgeBaseArticle'
          application/xml:
            schema:
              $ref: '#/components/schemas/KnowledgeBaseArticle'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KnowledgeBaseArticle'
            application/xml:
              schema:
                $ref: '#/components/schemas/KnowledgeBaseArticle'
  /v1.0/knowledge-base-articles/{knowledgeBaseArticleId}/subscribe:
    put:
      tags:
      - KnowledgeBaseArticle
      operationId: putKnowledgeBaseArticleSubscribe
      parameters:
      - name: knowledgeBaseArticleId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
            application/xml: {}
  /v1.0/knowledge-base-articles/{knowledgeBaseArticleId}/unsubscribe:
    put:
      tags:
      - KnowledgeBaseArticle
      operationId: putKnowledgeBaseArticleUnsubscribe
      parameters:
      - name: knowledgeBaseArticleId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
            application/xml: {}
  /v1.0/sites/{siteId}/knowledge-base-articles/subscribe:
    put:
      tags:
      - KnowledgeBaseArticle
      operationId: putSiteKnowledgeBaseArticleSubscribe
      parameters:
      - name: siteId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
            application/xml: {}
  /v1.0/sites/{siteId}/knowledge-base-articles/unsubscribe:
    put:
      tags:
      - KnowledgeBaseArticle
      operationId: putSiteKnowledgeBaseArticleUnsubscribe
      parameters:
      - name: siteId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
            application/xml: {}
  /v1.0/knowledge-base-articles/batch:
    put:
      tags:
      - KnowledgeBaseArticle
      operationId: putKnowledgeBaseArticleBatch
      parameters:
      - name: callbackURL
        in: query
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        default:
          description: default response
          content:
            application/json: {}
    delete:
      tags:
      - KnowledgeBaseArticle
      operationId: deleteKnowledgeBaseArticleBatch
      parameters:
      - name: callbackURL
        in: query
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1.0/knowledge-base-folders/{knowledgeBaseFolderId}/knowledge-base-articles/batch:
    post:
      tags:
      - KnowledgeBaseArticle
      operationId: postKnowledgeBaseFolderKnowledgeBaseArticleBatch
      parameters:
      - name: knowledgeBaseFolderId
        in: path
        required: true
        schema:
          type: string
      - name: callbackURL
        in: query
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1.0/sites/{siteId}/knowledge-base-articles/batch:
    post:
      tags:
      - KnowledgeBaseArticle
      operationId: postSiteKnowledgeBaseArticleBatch
      parameters:
      - name: siteId
        in: path
        required: true
        schema:
          type: string
      - name: callbackURL
        in: query
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1.0/knowledge-base-attachments/{knowledgeBaseAttachmentId}:
    get:
      tags:
      - KnowledgeBaseAttachment
      description: Retrieves the knowledge base attachment.
      operationId: getKnowledgeBaseAttachment
      parameters:
      - name: knowledgeBaseAttachmentId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KnowledgeBaseAttachment'
            application/xml:
              schema:
                $ref: '#/components/schemas/KnowledgeBaseAttachment'
    delete:
      tags:
      - KnowledgeBaseAttachment
      description: Deletes the knowledge base file attachment and returns a 204 if
        the operation succeeds.
      operationId: deleteKnowledgeBaseAttachment
      parameters:
      - name: knowledgeBaseAttachmentId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
            application/xml: {}
  /v1.0/knowledge-base-articles/{knowledgeBaseArticleId}/knowledge-base-attachments:
    get:
      tags:
      - KnowledgeBaseAttachment
      description: Retrieves the knowledge base article's attachments.
      operationId: getKnowledgeBaseArticleKnowledgeBaseAttachmentsPage
      parameters:
      - name: knowledgeBaseArticleId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageKnowledgeBaseAttachment'
            application/xml:
              schema:
                $ref: '#/components/schemas/PageKnowledgeBaseAttachment'
    post:
      tags:
      - KnowledgeBaseAttachment
      description: Creates a new attachment for an existing knowledge base article.
        The request body must be `multipart/form-data` with two parts, a `file` part
        with the file's bytes, and an optional JSON string (`knowledgeBaseAttachment`)
        with the metadata.
      operationId: postKnowledgeBaseArticleKnowledgeBaseAttachment
      parameters:
      - name: knowledgeBaseArticleId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MultipartBody'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KnowledgeBaseAttachment'
            application/xml:
              schema:
                $ref: '#/components/schemas/KnowledgeBaseAttachment'
  /v1.0/knowledge-base-articles/{knowledgeBaseArticleId}/knowledge-base-attachments/batch:
    post:
      tags:
      - KnowledgeBaseAttachment
      operationId: postKnowledgeBaseArticleKnowledgeBaseAttachmentBatch
      parameters:
      - name: knowledgeBaseArticleId
        in: path
        required: true
        schema:
          type: string
      - name: callbackURL
        in: query
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MultipartBody'
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1.0/knowledge-base-attachments/batch:
    delete:
      tags:
      - KnowledgeBaseAttachment
      operationId: deleteKnowledgeBaseAttachmentBatch
      parameters:
      - name: callbackURL
        in: query
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1.0/knowledge-base-folders/{knowledgeBaseFolderId}:
    get:
      tags:
      - KnowledgeBaseFolder
      description: Retrieves the knowledge base folder.
      operationId: getKnowledgeBaseFolder
      parameters:
      - name: knowledgeBaseFolderId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KnowledgeBaseFolder'
            application/xml:
              schema:
                $ref: '#/components/schemas/KnowledgeBaseFolder'
    put:
      tags:
      - KnowledgeBaseFolder
      description: Replaces the knowledge base folder with the information sent in
        the request body. Any missing fields are deleted, unless they are required.
      operationId: putKnowledgeBaseFolder
      parameters:
      - name: knowledgeBaseFolderId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KnowledgeBaseFolder'
          application/xml:
            schema:
              $ref: '#/components/schemas/KnowledgeBaseFolder'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KnowledgeBaseFolder'
            application/xml:
              schema:
                $ref: '#/components/schemas/KnowledgeBaseFolder'
    delete:
      tags:
      - KnowledgeBaseFolder
      description: Deletes the knowledge base folder and returns a 204 if the operation
        succeeds.
      operationId: deleteKnowledgeBaseFolder
      parameters:
      - name: knowledgeBaseFolderId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
            application/xml: {}
    patch:
      tags:
      - KnowledgeBaseFolder
      description: Updates only the fields received in the request body, leaving any
        other fields untouched.
      operationId: patchKnowledgeBaseFolder
      parameters:
      - name: knowledgeBaseFolderId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KnowledgeBaseFolder'
          application/xml:
            schema:
              $ref: '#/components/schemas/KnowledgeBaseFolder'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KnowledgeBaseFolder'
            application/xml:
              schema:
                $ref: '#/components/schemas/KnowledgeBaseFolder'
  /v1.0/sites/{siteId}/knowledge-base-folders:
    get:
      tags:
      - KnowledgeBaseFolder
      description: Retrieves the site's knowledge base folders. Results can be paginated.
      operationId: getSiteKnowledgeBaseFoldersPage
      parameters:
      - name: siteId
        in: path
        required: true
        schema:
          type: string
      - name: page
        in: query
        schema:
          type: string
      - name: pageSize
        in: query
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageKnowledgeBaseFolder'
            application/xml:
              schema:
                $ref: '#/components/schemas/PageKnowledgeBaseFolder'
    post:
      tags:
      - KnowledgeBaseFolder
      description: Creates a new knowledge base folder.
      operationId: postSiteKnowledgeBaseFolder
      parameters:
      - name: siteId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KnowledgeBaseFolder'
          application/xml:
            schema:
              $ref: '#/components/schemas/KnowledgeBaseFolder'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KnowledgeBaseFolder'
            application/xml:
              schema:
                $ref: '#/components/schemas/KnowledgeBaseFolder'
  /v1.0/knowledge-base-folders/{parentKnowledgeBaseFolderId}/knowledge-base-folders:
    get:
      tags:
      - KnowledgeBaseFolder
      description: Retrieves the knowledge base folder's subfolders.
      operationId: getKnowledgeBaseFolderKnowledgeBaseFoldersPage
      parameters:
      - name: parentKnowledgeBaseFolderId
        in: path
        required: true
        schema:
          type: string
      - name: page
        in: query
        schema:
          type: string
      - name: pageSize
        in: query
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageKnowledgeBaseFolder'
            application/xml:
              schema:
                $ref: '#/components/schemas/PageKnowledgeBaseFolder'
    post:
      tags:
      - KnowledgeBaseFolder
      description: Creates a knowledge base folder inside the parent folder.
      operationId: postKnowledgeBaseFolderKnowledgeBaseFolder
      parameters:
      - name: parentKnowledgeBaseFolderId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KnowledgeBaseFolder'
          application/xml:
            schema:
              $ref: '#/components/schemas/KnowledgeBaseFolder'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KnowledgeBaseFolder'
            application/xml:
              schema:
                $ref: '#/components/schemas/KnowledgeBaseFolder'
  /v1.0/knowledge-base-folders/batch:
    put:
      tags:
      - KnowledgeBaseFolder
      operationId: putKnowledgeBaseFolderBatch
      parameters:
      - name: callbackURL
        in: query
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        default:
          description: default response
          content:
            application/json: {}
    delete:
      tags:
      - KnowledgeBaseFolder
      operationId: deleteKnowledgeBaseFolderBatch
      parameters:
      - name: callbackURL
        in: query
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1.0/sites/{siteId}/knowledge-base-folders/batch:
    post:
      tags:
      - KnowledgeBaseFolder
      operationId: postSiteKnowledgeBaseFolderBatch
      parameters:
      - name: siteId
        in: path
        required: true
        schema:
          type: string
      - name: callbackURL
        in: query
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1.0/message-board-attachments/{messageBoardAttachmentId}:
    get:
      tags:
      - MessageBoardAttachment
      description: Retrieves the message board attachment.
      operationId: getMessageBoardAttachment
      parameters:
      - name: messageBoardAttachmentId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageBoardAttachment'
            application/xml:
              schema:
                $ref: '#/components/schemas/MessageBoardAttachment'
    delete:
      tags:
      - MessageBoardAttachment
      description: Deletes the message board attachment and returns a 204 if the operation
        succeeds.
      operationId: deleteMessageBoardAttachment
      parameters:
      - name: messageBoardAttachmentId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
            application/xml: {}
  /v1.0/message-board-messages/{messageBoardMessageId}/message-board-attachments:
    get:
      tags:
      - MessageBoardAttachment
      description: Retrieves the message board message's attachments.
      operationId: getMessageBoardMessageMessageBoardAttachmentsPage
      parameters:
      - name: messageBoardMessageId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageMessageBoardAttachment'
            application/xml:
              schema:
                $ref: '#/components/schemas/PageMessageBoardAttachment'
    post:
      tags:
      - MessageBoardAttachment
      description: Creates an attachment for the message board message. The request
        body must be `multipart/form-data` with two parts, the file's bytes (`file`),
        and an optional JSON string (`MessageBoardAttachment`) with the metadata.
      operationId: postMessageBoardMessageMessageBoardAttachment
      parameters:
      - name: messageBoardMessageId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MultipartBody'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageBoardAttachment'
            application/xml:
              schema:
                $ref: '#/components/schemas/MessageBoardAttachment'
  /v1.0/message-board-threads/{messageBoardThreadId}/message-board-attachments:
    get:
      tags:
      - MessageBoardAttachment
      description: Retrieves the message board thread's attachments.
      operationId: getMessageBoardThreadMessageBoardAttachmentsPage
      parameters:
      - name: messageBoardThreadId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageMessageBoardAttachment'
            application/xml:
              schema:
                $ref: '#/components/schemas/PageMessageBoardAttachment'
    post:
      tags:
      - MessageBoardAttachment
      description: Creates a new attachment for the message board thread. The request
        body should be `multipart/form-data` with two parts, the file's bytes (`file`),
        and an optional JSON string (`knowledgeBaseAttachment`) with the metadata.
      operationId: postMessageBoardThreadMessageBoardAttachment
      parameters:
      - name: messageBoardThreadId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MultipartBody'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageBoardAttachment'
            application/xml:
              schema:
                $ref: '#/components/schemas/MessageBoardAttachment'
  /v1.0/message-board-attachments/batch:
    delete:
      tags:
      - MessageBoardAttachment
      operationId: deleteMessageBoardAttachmentBatch
      parameters:
      - name: callbackURL
        in: query
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1.0/message-board-messages/{messageBoardMessageId}/message-board-attachments/batch:
    post:
      tags:
      - MessageBoardAttachment
      operationId: postMessageBoardMessageMessageBoardAttachmentBatch
      parameters:
      - name: messageBoardMessageId
        in: path
        required: true
        schema:
          type: string
      - name: callbackURL
        in: query
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MultipartBody'
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1.0/message-board-threads/{messageBoardThreadId}/message-board-attachments/batch:
    post:
      tags:
      - MessageBoardAttachment
      operationId: postMessageBoardThreadMessageBoardAttachmentBatch
      parameters:
      - name: messageBoardThreadId
        in: path
        required: true
        schema:
          type: string
      - name: callbackURL
        in: query
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MultipartBody'
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1.0/message-board-messages/{messageBoardMessageId}/my-rating:
    get:
      tags:
      - MessageBoardMessage
      description: Retrieves the message board message's rating.
      operationId: getMessageBoardMessageMyRating
      parameters:
      - name: messageBoardMessageId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rating'
            application/xml:
              schema:
                $ref: '#/components/schemas/Rating'
    put:
      tags:
      - MessageBoardMessage
      description: Replaces the rating with the information sent in the request body.
        Any missing fields are deleted, unless they are required.
      operationId: putMessageBoardMessageMyRating
      parameters:
      - name: messageBoardMessageId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rating'
          application/xml:
            schema:
              $ref: '#/components/schemas/Rating'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rating'
            application/xml:
              schema:
                $ref: '#/components/schemas/Rating'
    post:
      tags:
      - MessageBoardMessage
      description: Creates a rating for the message board message.
      operationId: postMessageBoardMessageMyRating
      parameters:
      - name: messageBoardMessageId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rating'
          application/xml:
            schema:
              $ref: '#/components/schemas/Rating'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rating'
            application/xml:
              schema:
                $ref: '#/components/schemas/Rating'
    delete:
      tags:
      - MessageBoardMessage
      description: Deletes the message board message's rating and returns a 204 if
        the operation succeeds.
      operationId: deleteMessageBoardMessageMyRating
      parameters:
      - name: messageBoardMessageId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
            application/xml: {}
  /v1.0/message-board-messages/{messageBoardMessageId}:
    get:
      tags:
      - MessageBoardMessage
      description: Retrieves the message board message.
      operationId: getMessageBoardMessage
      parameters:
      - name: messageBoardMessageId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageBoardMessage'
            application/xml:
              schema:
                $ref: '#/components/schemas/MessageBoardMessage'
    put:
      tags:
      - MessageBoardMessage
      description: Replaces the message board message with the information sent in
        the request body. Any missing fields are deleted, unless they are required.
      operationId: putMessageBoardMessage
      parameters:
      - name: messageBoardMessageId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageBoardMessage'
          application/xml:
            schema:
              $ref: '#/components/schemas/MessageBoardMessage'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageBoardMessage'
            application/xml:
              schema:
                $ref: '#/components/schemas/MessageBoardMessage'
    delete:
      tags:
      - MessageBoardMessage
      description: Deletes the message board message and returns a 204 if the operation
        succeeds.
      operationId: deleteMessageBoardMessage
      parameters:
      - name: messageBoardMessageId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
            application/xml: {}
    patch:
      tags:
      - MessageBoardMessage
      description: Updates only the fields received in the request body, leaving any
        other fields untouched.
      operationId: patchMessageBoardMessage
      parameters:
      - name: messageBoardMessageId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageBoardMessage'
          application/xml:
            schema:
              $ref: '#/components/schemas/MessageBoardMessage'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageBoardMessage'
            application/xml:
              schema:
                $ref: '#/components/schemas/MessageBoardMessage'
  /v1.0/message-board-messages/{parentMessageBoardMessageId}/message-board-messages:
    get:
      tags:
      - MessageBoardMessage
      description: Retrieves the parent message board message's child messages. Results
        can be paginated, filtered, searched, and sorted.
      operationId: getMessageBoardMessageMessageBoardMessagesPage
      parameters:
      - name: parentMessageBoardMessageId
        in: path
        required: true
        schema:
          type: string
      - name: search
        in: query
        schema:
          type: string
      - name: filter
        in: query
        schema:
          type: string
      - name: page
        in: query
        schema:
          type: string
      - name: pageSize
        in: query
        schema:
          type: string
      - name: sort
        in: query
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageMessageBoardMessage'
            application/xml:
              schema:
                $ref: '#/components/schemas/PageMessageBoardMessage'
    post:
      tags:
      - MessageBoardMessage
      description: Creates a child message board message of the parent message.
      operationId: postMessageBoardMessageMessageBoardMessage
      parameters:
      - name: parentMessageBoardMessageId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageBoardMessage'
          application/xml:
            schema:
              $ref: '#/components/schemas/MessageBoardMessage'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageBoardMessage'
            application/xml:
              schema:
                $ref: '#/components/schemas/MessageBoardMessage'
  /v1.0/message-board-threads/{messageBoardThreadId}/message-board-messages:
    get:
      tags:
      - MessageBoardMessage
      description: Retrieves the message board thread's messages. Results can be paginated,
        filtered, searched, and sorted.
      operationId: getMessageBoardThreadMessageBoardMessagesPage
      parameters:
      - name: messageBoardThreadId
        in: path
        required: true
        schema:
          type: string
      - name: search
        in: query
        schema:
          type: string
      - name: filter
        in: query
        schema:
          type: string
      - name: page
        in: query
        schema:
          type: string
      - name: pageSize
        in: query
        schema:
          type: string
      - name: sort
        in: query
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageMessageBoardMessage'
            application/xml:
              schema:
                $ref: '#/components/schemas/PageMessageBoardMessage'
    post:
      tags:
      - MessageBoardMessage
      description: Creates a new message in the message board thread.
      operationId: postMessageBoardThreadMessageBoardMessage
      parameters:
      - name: messageBoardThreadId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageBoardMessage'
          application/xml:
            schema:
              $ref: '#/components/schemas/MessageBoardMessage'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageBoardMessage'
            application/xml:
              schema:
                $ref: '#/components/schemas/MessageBoardMessage'
  /v1.0/sites/{siteId}/message-board-messages:
    get:
      tags:
      - MessageBoardMessage
      description: Retrieves the site's message board messages.
      operationId: getSiteMessageBoardMessagesPage
      parameters:
      - name: siteId
        in: path
        required: true
        schema:
          type: string
      - name: flatten
        in: query
        schema:
          type: string
      - name: search
        in: query
        schema:
          type: string
      - name: filter
        in: query
        schema:
          type: string
      - name: page
        in: query
        schema:
          type: string
      - name: pageSize
        in: query
        schema:
          type: string
      - name: sort
        in: query
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageMessageBoardMessage'
            application/xml:
              schema:
                $ref: '#/components/schemas/PageMessageBoardMessage'
  /v1.0/message-board-messages/{messageBoardMessageId}/subscribe:
    put:
      tags:
      - MessageBoardMessage
      operationId: putMessageBoardMessageSubscribe
      parameters:
      - name: messageBoardMessageId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
            application/xml: {}
  /v1.0/message-board-messages/{messageBoardMessageId}/unsubscribe:
    put:
      tags:
      - MessageBoardMessage
      operationId: putMessageBoardMessageUnsubscribe
      parameters:
      - name: messageBoardMessageId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
            application/xml: {}
  /v1.0/message-board-threads/{messageBoardThreadId}/message-board-messages/batch:
    post:
      tags:
      - MessageBoardMessage
      operationId: postMessageBoardThreadMessageBoardMessageBatch
      parameters:
      - name: messageBoardThreadId
        in: path
        required: true
        schema:
          type: string
      - name: callbackURL
        in: query
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1.0/message-board-messages/batch:
    put:
      tags:
      - MessageBoardMessage
      operationId: putMessageBoardMessageBatch
      parameters:
      - name: callbackURL
        in: query
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        default:
          description: default response
          content:
            application/json: {}
    delete:
      tags:
      - MessageBoardMessage
      operationId: deleteMessageBoardMessageBatch
      parameters:
      - name: callbackURL
        in: query
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1.0/message-board-sections/{messageBoardSectionId}:
    get:
      tags:
      - MessageBoardSection
      description: Retrieves the message board section.
      operationId: getMessageBoardSection
      parameters:
      - name: messageBoardSectionId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageBoardSection'
            application/xml:
              schema:
                $ref: '#/components/schemas/MessageBoardSection'
    put:
      tags:
      - MessageBoardSection
      description: Replaces the message board section with the information sent in
        the request body. Any missing fields are deleted, unless they are required.
      operationId: putMessageBoardSection
      parameters:
      - name: messageBoardSectionId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageBoardSection'
          application/xml:
            schema:
              $ref: '#/components/schemas/MessageBoardSection'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageBoardSection'
            application/xml:
              schema:
                $ref: '#/components/schemas/MessageBoardSection'
    delete:
      tags:
      - MessageBoardSection
      description: Deletes the message board section and returns a 204 if the operation
        succeeds.
      operationId: deleteMessageBoardSection
      parameters:
      - name: messageBoardSectionId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
            application/xml: {}
    patch:
      tags:
      - MessageBoardSection
      description: Updates only the fields received in the request body, leaving any
        other fields untouched.
      operationId: patchMessageBoardSection
      parameters:
      - name: messageBoardSectionId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageBoardSection'
          application/xml:
            schema:
              $ref: '#/components/schemas/MessageBoardSection'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageBoardSection'
            application/xml:
              schema:
                $ref: '#/components/schemas/MessageBoardSection'
  /v1.0/message-board-sections/{parentMessageBoardSectionId}/message-board-sections:
    get:
      tags:
      - MessageBoardSection
      description: Retrieves the parent message board section's subsections. Results
        can be paginated, filtered, searched, and sorted.
      operationId: getMessageBoardSectionMessageBoardSectionsPage
      parameters:
      - name: parentMessageBoardSectionId
        in: path
        required: true
        schema:
          type: string
      - name: search
        in: query
        schema:
          type: string
      - name: filter
        in: query
        schema:
          type: string
      - name: page
        in: query
        schema:
          type: string
      - name: pageSize
        in: query
        schema:
          type: string
      - name: sort
        in: query
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageMessageBoardSection'
            application/xml:
              schema:
                $ref: '#/components/schemas/PageMessageBoardSection'
    post:
      tags:
      - MessageBoardSection
      description: Creates a new message board section in the parent section.
      operationId: postMessageBoardSectionMessageBoardSection
      parameters:
      - name: parentMessageBoardSectionId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageBoardSection'
          application/xml:
            schema:
              $ref: '#/components/schemas/MessageBoardSection'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageBoardSection'
            application/xml:
              schema:
                $ref: '#/components/schemas/MessageBoardSection'
  /v1.0/message-board-sections/{messageBoardSectionId}/unsubscribe:
    put:
      tags:
      - MessageBoardSection
      operationId: putMessageBoardSectionUnsubscribe
      parameters:
      - name: messageBoardSectionId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
            application/xml: {}
  /v1.0/sites/{siteId}/message-board-sections:
    get:
      tags:
      - MessageBoardSection
      description: Retrieves the site's message board sections. Results can be paginated,
        filtered, searched, flattened, and sorted.
      operationId: getSiteMessageBoardSectionsPage
      parameters:
      - name: siteId
        in: path
        required: true
        schema:
          type: string
      - name: flatten
        in: query
        schema:
          type: string
      - name: search
        in: query
        schema:
          type: string
      - name: filter
        in: query
        schema:
          type: string
      - name: page
        in: query
        schema:
          type: string
      - name: pageSize
        in: query
        schema:
          type: string
      - name: sort
        in: query
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageMessageBoardSection'
            application/xml:
              schema:
                $ref: '#/components/schemas/PageMessageBoardSection'
    post:
      tags:
      - MessageBoardSection
      description: Creates a new message board section.
      operationId: postSiteMessageBoardSection
      parameters:
      - name: siteId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageBoardSection'
          application/xml:
            schema:
              $ref: '#/components/schemas/MessageBoardSection'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageBoardSection'
            application/xml:
              schema:
                $ref: '#/components/schemas/MessageBoardSection'
  /v1.0/message-board-sections/{messageBoardSectionId}/subscribe:
    put:
      tags:
      - MessageBoardSection
      operationId: putMessageBoardSectionSubscribe
      parameters:
      - name: messageBoardSectionId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
            application/xml: {}
  /v1.0/message-board-sections/batch:
    put:
      tags:
      - MessageBoardSection
      operationId: putMessageBoardSectionBatch
      parameters:
      - name: callbackURL
        in: query
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        default:
          description: default response
          content:
            application/json: {}
    delete:
      tags:
      - MessageBoardSection
      operationId: deleteMessageBoardSectionBatch
      parameters:
      - name: callbackURL
        in: query
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1.0/sites/{siteId}/message-board-sections/batch:
    post:
      tags:
      - MessageBoardSection
      operationId: postSiteMessageBoardSectionBatch
      parameters:
      - name: siteId
        in: path
        required: true
        schema:
          type: string
      - name: callbackURL
        in: query
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1.0/message-board-threads/{messageBoardThreadId}/my-rating:
    get:
      tags:
      - MessageBoardThread
      description: Retrieves the message board thread's rating.
      operationId: getMessageBoardThreadMyRating
      parameters:
      - name: messageBoardThreadId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rating'
            application/xml:
              schema:
                $ref: '#/components/schemas/Rating'
    put:
      tags:
      - MessageBoardThread
      description: Replaces the rating with the information sent in the request body.
        Any missing fields are deleted, unless they are required.
      operationId: putMessageBoardThreadMyRating
      parameters:
      - name: messageBoardThreadId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rating'
          application/xml:
            schema:
              $ref: '#/components/schemas/Rating'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rating'
            application/xml:
              schema:
                $ref: '#/components/schemas/Rating'
    post:
      tags:
      - MessageBoardThread
      description: Creates the message board thread's rating.
      operationId: postMessageBoardThreadMyRating
      parameters:
      - name: messageBoardThreadId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rating'
          application/xml:
            schema:
              $ref: '#/components/schemas/Rating'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rating'
            application/xml:
              schema:
                $ref: '#/components/schemas/Rating'
    delete:
      tags:
      - MessageBoardThread
      description: Deletes the message board thread's rating and returns a 204 if
        the operation succeeds.
      operationId: deleteMessageBoardThreadMyRating
      parameters:
      - name: messageBoardThreadId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
            application/xml: {}
  /v1.0/sites/{siteId}/message-board-threads:
    get:
      tags:
      - MessageBoardThread
      description: Retrieves the site's message board threads. Results can be paginated,
        filtered, searched, flattened, and sorted.
      operationId: getSiteMessageBoardThreadsPage
      parameters:
      - name: siteId
        in: path
        required: true
        schema:
          type: string
      - name: flatten
        in: query
        schema:
          type: string
      - name: search
        in: query
        schema:
          type: string
      - name: filter
        in: query
        schema:
          type: string
      - name: page
        in: query
        schema:
          type: string
      - name: pageSize
        in: query
        schema:
          type: string
      - name: sort
        in: query
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageMessageBoardThread'
            application/xml:
              schema:
                $ref: '#/components/schemas/PageMessageBoardThread'
    post:
      tags:
      - MessageBoardThread
      description: Creates a new message board thread.
      operationId: postSiteMessageBoardThread
      parameters:
      - name: siteId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageBoardThread'
          application/xml:
            schema:
              $ref: '#/components/schemas/MessageBoardThread'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageBoardThread'
            application/xml:
              schema:
                $ref: '#/components/schemas/MessageBoardThread'
  /v1.0/message-board-threads/{messageBoardThreadId}:
    get:
      tags:
      - MessageBoardThread
      description: Retrieves the message board thread.
      operationId: getMessageBoardThread
      parameters:
      - name: messageBoardThreadId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageBoardThread'
            application/xml:
              schema:
                $ref: '#/components/schemas/MessageBoardThread'
    put:
      tags:
      - MessageBoardThread
      description: Replaces the message board thread with the information sent in
        the request body. Any missing fields are deleted, unless they are required.
      operationId: putMessageBoardThread
      parameters:
      - name: messageBoardThreadId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageBoardThread'
          application/xml:
            schema:
              $ref: '#/components/schemas/MessageBoardThread'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageBoardThread'
            application/xml:
              schema:
                $ref: '#/components/schemas/MessageBoardThread'
    delete:
      tags:
      - MessageBoardThread
      description: Deletes the message board thread and returns a 204 if the operation
        succeeds.
      operationId: deleteMessageBoardThread
      parameters:
      - name: messageBoardThreadId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
            application/xml: {}
    patch:
      tags:
      - MessageBoardThread
      description: Updates only the fields received in the request body, leaving any
        other fields untouched.
      operationId: patchMessageBoardThread
      parameters:
      - name: messageBoardThreadId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageBoardThread'
          application/xml:
            schema:
              $ref: '#/components/schemas/MessageBoardThread'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageBoardThread'
            application/xml:
              schema:
                $ref: '#/components/schemas/MessageBoardThread'
  /v1.0/message-board-threads/{messageBoardThreadId}/subscribe:
    put:
      tags:
      - MessageBoardThread
      operationId: putMessageBoardThreadSubscribe
      parameters:
      - name: messageBoardThreadId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
            application/xml: {}
  /v1.0/message-board-threads/{messageBoardThreadId}/unsubscribe:
    put:
      tags:
      - MessageBoardThread
      operationId: putMessageBoardThreadUnsubscribe
      parameters:
      - name: messageBoardThreadId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
            application/xml: {}
  /v1.0/message-board-sections/{messageBoardSectionId}/message-board-threads:
    get:
      tags:
      - MessageBoardThread
      description: Retrieves the message board section's threads. Results can be paginated,
        filtered, searched, and sorted.
      operationId: getMessageBoardSectionMessageBoardThreadsPage
      parameters:
      - name: messageBoardSectionId
        in: path
        required: true
        schema:
          type: string
      - name: search
        in: query
        schema:
          type: string
      - name: filter
        in: query
        schema:
          type: string
      - name: page
        in: query
        schema:
          type: string
      - name: pageSize
        in: query
        schema:
          type: string
      - name: sort
        in: query
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageMessageBoardThread'
            application/xml:
              schema:
                $ref: '#/components/schemas/PageMessageBoardThread'
    post:
      tags:
      - MessageBoardThread
      description: Creates a new message board thread inside a section.
      operationId: postMessageBoardSectionMessageBoardThread
      parameters:
      - name: messageBoardSectionId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageBoardThread'
          application/xml:
            schema:
              $ref: '#/components/schemas/MessageBoardThread'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageBoardThread'
            application/xml:
              schema:
                $ref: '#/components/schemas/MessageBoardThread'
  /v1.0/message-board-threads/batch:
    put:
      tags:
      - MessageBoardThread
      operationId: putMessageBoardThreadBatch
      parameters:
      - name: callbackURL
        in: query
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        default:
          description: default response
          content:
            application/json: {}
    delete:
      tags:
      - MessageBoardThread
      operationId: deleteMessageBoardThreadBatch
      parameters:
      - name: callbackURL
        in: query
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1.0/sites/{siteId}/message-board-threads/batch:
    post:
      tags:
      - MessageBoardThread
      operationId: postSiteMessageBoardThreadBatch
      parameters:
      - name: siteId
        in: path
        required: true
        schema:
          type: string
      - name: callbackURL
        in: query
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1.0/message-board-sections/{messageBoardSectionId}/message-board-threads/batch:
    post:
      tags:
      - MessageBoardThread
      operationId: postMessageBoardSectionMessageBoardThreadBatch
      parameters:
      - name: messageBoardSectionId
        in: path
        required: true
        schema:
          type: string
      - name: callbackURL
        in: query
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1.0/openapi.{type}:
    get:
      operationId: getOpenAPI
      parameters:
      - name: type
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
            application/yaml: {}
  /v1.0/sites/{siteId}/structured-content-folders:
    get:
      tags:
      - StructuredContentFolder
      description: Retrieves the site's structured content folders. Results can be
        paginated, filtered, searched, flattened, and sorted.
      operationId: getSiteStructuredContentFoldersPage
      parameters:
      - name: siteId
        in: path
        required: true
        schema:
          type: string
      - name: flatten
        in: query
        schema:
          type: string
      - name: search
        in: query
        schema:
          type: string
      - name: filter
        in: query
        schema:
          type: string
      - name: page
        in: query
        schema:
          type: string
      - name: pageSize
        in: query
        schema:
          type: string
      - name: sort
        in: query
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageStructuredContentFolder'
            application/xml:
              schema:
                $ref: '#/components/schemas/PageStructuredContentFolder'
    post:
      tags:
      - StructuredContentFolder
      description: Creates a new structured content folder.
      operationId: postSiteStructuredContentFolder
      parameters:
      - name: siteId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StructuredContentFolder'
          application/xml:
            schema:
              $ref: '#/components/schemas/StructuredContentFolder'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StructuredContentFolder'
            application/xml:
              schema:
                $ref: '#/components/schemas/StructuredContentFolder'
  /v1.0/structured-content-folders/{structuredContentFolderId}:
    get:
      tags:
      - StructuredContentFolder
      description: Retrieves the structured content folder.
      operationId: getStructuredContentFolder
      parameters:
      - name: structuredContentFolderId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StructuredContentFolder'
            application/xml:
              schema:
                $ref: '#/components/schemas/StructuredContentFolder'
    put:
      tags:
      - StructuredContentFolder
      description: Replaces the structured content folder with the information sent
        in the request body. Any missing fields are deleted, unless they are required.
      operationId: putStructuredContentFolder
      parameters:
      - name: structuredContentFolderId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StructuredContentFolder'
          application/xml:
            schema:
              $ref: '#/components/schemas/StructuredContentFolder'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StructuredContentFolder'
            application/xml:
              schema:
                $ref: '#/components/schemas/StructuredContentFolder'
    delete:
      tags:
      - StructuredContentFolder
      description: Deletes the structured content folder and returns a 204 if the
        operation succeeds.
      operationId: deleteStructuredContentFolder
      parameters:
      - name: structuredContentFolderId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
            application/xml: {}
    patch:
      tags:
      - StructuredContentFolder
      description: Updates only the fields received in the request body, leaving any
        other fields untouched.
      operationId: patchStructuredContentFolder
      parameters:
      - name: structuredContentFolderId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StructuredContentFolder'
          application/xml:
            schema:
              $ref: '#/components/schemas/StructuredContentFolder'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StructuredContentFolder'
            application/xml:
              schema:
                $ref: '#/components/schemas/StructuredContentFolder'
  /v1.0/structured-content-folders/{parentStructuredContentFolderId}/structured-content-folders:
    get:
      tags:
      - StructuredContentFolder
      description: Retrieves the parent structured content folder's subfolders. Results
        can be paginated, filtered, searched, and sorted.
      operationId: getStructuredContentFolderStructuredContentFoldersPage
      parameters:
      - name: parentStructuredContentFolderId
        in: path
        required: true
        schema:
          type: string
      - name: search
        in: query
        schema:
          type: string
      - name: filter
        in: query
        schema:
          type: string
      - name: page
        in: query
        schema:
          type: string
      - name: pageSize
        in: query
        schema:
          type: string
      - name: sort
        in: query
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageStructuredContentFolder'
            application/xml:
              schema:
                $ref: '#/components/schemas/PageStructuredContentFolder'
    post:
      tags:
      - StructuredContentFolder
      description: Creates a new structured content folder in an existing folder.
      operationId: postStructuredContentFolderStructuredContentFolder
      parameters:
      - name: parentStructuredContentFolderId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StructuredContentFolder'
          application/xml:
            schema:
              $ref: '#/components/schemas/StructuredContentFolder'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StructuredContentFolder'
            application/xml:
              schema:
                $ref: '#/components/schemas/StructuredContentFolder'
  /v1.0/structured-content-folders/{structuredContentFolderId}/subscribe:
    put:
      tags:
      - StructuredContentFolder
      operationId: putStructuredContentFolderSubscribe
      parameters:
      - name: structuredContentFolderId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
            application/xml: {}
  /v1.0/structured-content-folders/{structuredContentFolderId}/unsubscribe:
    put:
      tags:
      - StructuredContentFolder
      operationId: putStructuredContentFolderUnsubscribe
      parameters:
      - name: structuredContentFolderId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
            application/xml: {}
  /v1.0/sites/{siteId}/structured-content-folders/batch:
    post:
      tags:
      - StructuredContentFolder
      operationId: postSiteStructuredContentFolderBatch
      parameters:
      - name: siteId
        in: path
        required: true
        schema:
          type: string
      - name: callbackURL
        in: query
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1.0/structured-content-folders/batch:
    put:
      tags:
      - StructuredContentFolder
      operationId: putStructuredContentFolderBatch
      parameters:
      - name: callbackURL
        in: query
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        default:
          description: default response
          content:
            application/json: {}
    delete:
      tags:
      - StructuredContentFolder
      operationId: deleteStructuredContentFolderBatch
      parameters:
      - name: callbackURL
        in: query
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1.0/structured-contents/{structuredContentId}:
    get:
      tags:
      - StructuredContent
      description: Retrieves the structured content via its ID.
      operationId: getStructuredContent
      parameters:
      - name: structuredContentId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StructuredContent'
            application/xml:
              schema:
                $ref: '#/components/schemas/StructuredContent'
    put:
      tags:
      - StructuredContent
      description: Replaces the structured content with the information sent in the
        request body. Any missing fields are deleted, unless they are required.
      operationId: putStructuredContent
      parameters:
      - name: structuredContentId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StructuredContent'
          application/xml:
            schema:
              $ref: '#/components/schemas/StructuredContent'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StructuredContent'
            application/xml:
              schema:
                $ref: '#/components/schemas/StructuredContent'
    delete:
      tags:
      - StructuredContent
      description: Deletes the structured content and returns a 204 if the operation
        succeeds.
      operationId: deleteStructuredContent
      parameters:
      - name: structuredContentId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
            application/xml: {}
    patch:
      tags:
      - StructuredContent
      description: Updates only the fields received in the request body, leaving any
        other fields untouched.
      operationId: patchStructuredContent
      parameters:
      - name: structuredContentId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StructuredContent'
          application/xml:
            schema:
              $ref: '#/components/schemas/StructuredContent'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StructuredContent'
            application/xml:
              schema:
                $ref: '#/components/schemas/StructuredContent'
  /v1.0/structured-contents/{structuredContentId}/my-rating:
    get:
      tags:
      - StructuredContent
      description: Retrieves the structured content's rating.
      operationId: getStructuredContentMyRating
      parameters:
      - name: structuredContentId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rating'
            application/xml:
              schema:
                $ref: '#/components/schemas/Rating'
    put:
      tags:
      - StructuredContent
      description: Replaces the rating with the information sent in the request body.
        Any missing fields are deleted, unless they are required.
      operationId: putStructuredContentMyRating
      parameters:
      - name: structuredContentId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rating'
          application/xml:
            schema:
              $ref: '#/components/schemas/Rating'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rating'
            application/xml:
              schema:
                $ref: '#/components/schemas/Rating'
    post:
      tags:
      - StructuredContent
      description: Create a rating for the structured content.
      operationId: postStructuredContentMyRating
      parameters:
      - name: structuredContentId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rating'
          application/xml:
            schema:
              $ref: '#/components/schemas/Rating'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rating'
            application/xml:
              schema:
                $ref: '#/components/schemas/Rating'
    delete:
      tags:
      - StructuredContent
      description: Deletes the structured content's rating and returns a 204 if the
        operation succeeds.
      operationId: deleteStructuredContentMyRating
      parameters:
      - name: structuredContentId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
            application/xml: {}
  /v1.0/content-structures/{contentStructureId}/structured-contents:
    get:
      tags:
      - StructuredContent
      description: Retrieves a list of the content structure's structured content.
        Results can be paginated, filtered, searched, and sorted.
      operationId: getContentStructureStructuredContentsPage
      parameters:
      - name: contentStructureId
        in: path
        required: true
        schema:
          type: string
      - name: search
        in: query
        schema:
          type: string
      - name: filter
        in: query
        schema:
          type: string
      - name: page
        in: query
        schema:
          type: string
      - name: pageSize
        in: query
        schema:
          type: string
      - name: sort
        in: query
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageStructuredContent'
            application/xml:
              schema:
                $ref: '#/components/schemas/PageStructuredContent'
  /v1.0/sites/{siteId}/structured-contents/by-key/{key}:
    get:
      tags:
      - StructuredContent
      description: Retrieves a structured content by its key (`articleKey`).
      operationId: getSiteStructuredContentByKey
      parameters:
      - name: siteId
        in: path
        required: true
        schema:
          type: string
      - name: key
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StructuredContent'
            application/xml:
              schema:
                $ref: '#/components/schemas/StructuredContent'
  /v1.0/sites/{siteId}/structured-contents/by-uuid/{uuid}:
    get:
      tags:
      - StructuredContent
      description: Retrieves a structured content by its UUID.
      operationId: getSiteStructuredContentByUuid
      parameters:
      - name: siteId
        in: path
        required: true
        schema:
          type: string
      - name: uuid
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StructuredContent'
            application/xml:
              schema:
                $ref: '#/components/schemas/StructuredContent'
  /v1.0/sites/{siteId}/structured-contents:
    get:
      tags:
      - StructuredContent
      description: Retrieves the site's structured content. Results can be paginated,
        filtered, searched, flattened, and sorted.
      operationId: getSiteStructuredContentsPage
      parameters:
      - name: siteId
        in: path
        required: true
        schema:
          type: string
      - name: flatten
        in: query
        schema:
          type: string
      - name: search
        in: query
        schema:
          type: string
      - name: filter
        in: query
        schema:
          type: string
      - name: page
        in: query
        schema:
          type: string
      - name: pageSize
        in: query
        schema:
          type: string
      - name: sort
        in: query
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageStructuredContent'
            application/xml:
              schema:
                $ref: '#/components/schemas/PageStructuredContent'
    post:
      tags:
      - StructuredContent
      description: Creates a new structured content.
      operationId: postSiteStructuredContent
      parameters:
      - name: siteId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StructuredContent'
          application/xml:
            schema:
              $ref: '#/components/schemas/StructuredContent'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StructuredContent'
            application/xml:
              schema:
                $ref: '#/components/schemas/StructuredContent'
  /v1.0/structured-content-folders/{structuredContentFolderId}/structured-contents:
    get:
      tags:
      - StructuredContent
      description: Retrieves the folder's structured content. Results can be paginated,
        filtered, searched, and sorted.
      operationId: getStructuredContentFolderStructuredContentsPage
      parameters:
      - name: structuredContentFolderId
        in: path
        required: true
        schema:
          type: string
      - name: flatten
        in: query
        schema:
          type: string
      - name: search
        in: query
        schema:
          type: string
      - name: filter
        in: query
        schema:
          type: string
      - name: page
        in: query
        schema:
          type: string
      - name: pageSize
        in: query
        schema:
          type: string
      - name: sort
        in: query
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageStructuredContent'
            application/xml:
              schema:
                $ref: '#/components/schemas/PageStructuredContent'
    post:
      tags:
      - StructuredContent
      description: Creates a new structured content in the folder.
      operationId: postStructuredContentFolderStructuredContent
      parameters:
      - name: structuredContentFolderId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StructuredContent'
          application/xml:
            schema:
              $ref: '#/components/schemas/StructuredContent'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StructuredContent'
            application/xml:
              schema:
                $ref: '#/components/schemas/StructuredContent'
  /v1.0/structured-contents/{structuredContentId}/rendered-content/{templateId}:
    get:
      tags:
      - StructuredContent
      description: Retrieves the structured content's rendered template (the result
        of applying the structure's values to a template).
      operationId: getStructuredContentRenderedContentTemplate
      parameters:
      - name: structuredContentId
        in: path
        required: true
        schema:
          type: string
      - name: templateId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            text/html:
              schema:
                type: string
  /v1.0/structured-content/{structuredContentId}/subscribe:
    put:
      tags:
      - StructuredContent
      operationId: putStructuredContentSubscribe
      parameters:
      - name: structuredContentId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
            application/xml: {}
  /v1.0/structured-content/{structuredContentId}/unsubscribe:
    put:
      tags:
      - StructuredContent
      operationId: putStructuredContentUnsubscribe
      parameters:
      - name: structuredContentId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
            application/xml: {}
  /v1.0/sites/{siteId}/structured-contents/batch:
    post:
      tags:
      - StructuredContent
      operationId: postSiteStructuredContentBatch
      parameters:
      - name: siteId
        in: path
        required: true
        schema:
          type: string
      - name: callbackURL
        in: query
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1.0/structured-content-folders/{structuredContentFolderId}/structured-contents/batch:
    post:
      tags:
      - StructuredContent
      operationId: postStructuredContentFolderStructuredContentBatch
      parameters:
      - name: structuredContentFolderId
        in: path
        required: true
        schema:
          type: string
      - name: callbackURL
        in: query
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1.0/structured-contents/batch:
    put:
      tags:
      - StructuredContent
      operationId: putStructuredContentBatch
      parameters:
      - name: callbackURL
        in: query
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        default:
          description: default response
          content:
            application/json: {}
    delete:
      tags:
      - StructuredContent
      operationId: deleteStructuredContentBatch
      parameters:
      - name: callbackURL
        in: query
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1.0/wiki-nodes/{wikiNodeId}:
    get:
      tags:
      - WikiNode
      description: Retrieves the wiki node
      operationId: getWikiNode
      parameters:
      - name: wikiNodeId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WikiNode'
            application/xml:
              schema:
                $ref: '#/components/schemas/WikiNode'
    put:
      tags:
      - WikiNode
      description: Replaces the wiki node with the information sent in the request
        body. Any missing fields are deleted, unless they are required.
      operationId: putWikiNode
      parameters:
      - name: wikiNodeId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WikiNode'
          application/xml:
            schema:
              $ref: '#/components/schemas/WikiNode'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WikiNode'
            application/xml:
              schema:
                $ref: '#/components/schemas/WikiNode'
    delete:
      tags:
      - WikiNode
      description: Deletes the wiki node and returns a 204 if the operation succeeds.
      operationId: deleteWikiNode
      parameters:
      - name: wikiNodeId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
            application/xml: {}
  /v1.0/sites/{siteId}/wiki-nodes:
    get:
      tags:
      - WikiNode
      description: Retrieves the wiki node's of a site. Results can be paginated,
        filtered, searched, and sorted.
      operationId: getSiteWikiNodesPage
      parameters:
      - name: siteId
        in: path
        required: true
        schema:
          type: string
      - name: search
        in: query
        schema:
          type: string
      - name: filter
        in: query
        schema:
          type: string
      - name: page
        in: query
        schema:
          type: string
      - name: pageSize
        in: query
        schema:
          type: string
      - name: sort
        in: query
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageWikiNode'
            application/xml:
              schema:
                $ref: '#/components/schemas/PageWikiNode'
    post:
      tags:
      - WikiNode
      description: Creates a new wiki node
      operationId: postSiteWikiNode
      parameters:
      - name: siteId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WikiNode'
          application/xml:
            schema:
              $ref: '#/components/schemas/WikiNode'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WikiNode'
            application/xml:
              schema:
                $ref: '#/components/schemas/WikiNode'
  /v1.0/wiki-node/{wikiNodeId}/subscribe:
    put:
      tags:
      - WikiNode
      operationId: putWikiNodeSubscribe
      parameters:
      - name: wikiNodeId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
            application/xml: {}
  /v1.0/wiki-node/{wikiNodeId}/unsubscribe:
    put:
      tags:
      - WikiNode
      operationId: putWikiNodeUnsubscribe
      parameters:
      - name: wikiNodeId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
            application/xml: {}
  /v1.0/sites/{siteId}/wiki-nodes/batch:
    post:
      tags:
      - WikiNode
      operationId: postSiteWikiNodeBatch
      parameters:
      - name: siteId
        in: path
        required: true
        schema:
          type: string
      - name: callbackURL
        in: query
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1.0/wiki-nodes/batch:
    put:
      tags:
      - WikiNode
      operationId: putWikiNodeBatch
      parameters:
      - name: callbackURL
        in: query
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        default:
          description: default response
          content:
            application/json: {}
    delete:
      tags:
      - WikiNode
      operationId: deleteWikiNodeBatch
      parameters:
      - name: callbackURL
        in: query
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1.0/wiki-page-attachments/{wikiPageAttachmentId}:
    get:
      tags:
      - WikiPageAttachment
      description: Retrieves the wiki page attachment.
      operationId: getWikiPageAttachment
      parameters:
      - name: wikiPageAttachmentId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WikiPageAttachment'
            application/xml:
              schema:
                $ref: '#/components/schemas/WikiPageAttachment'
    delete:
      tags:
      - WikiPageAttachment
      description: Deletes the wiki page attachment and returns a 204 if the operation
        succeeds.
      operationId: deleteWikiPageAttachment
      parameters:
      - name: wikiPageAttachmentId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
            application/xml: {}
  /v1.0/wiki-pages/{wikiPageId}/wiki-page-attachments:
    get:
      tags:
      - WikiPageAttachment
      description: Retrieves the wiki page's attachments.
      operationId: getWikiPageWikiPageAttachmentsPage
      parameters:
      - name: wikiPageId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageWikiPageAttachment'
            application/xml:
              schema:
                $ref: '#/components/schemas/PageWikiPageAttachment'
    post:
      tags:
      - WikiPageAttachment
      description: Creates an attachment for the wiki page. The request body must
        be `multipart/form-data` with two parts, the file's bytes (`file`), and an
        optional JSON string (`WikiPageAttachment`) with the metadata.
      operationId: postWikiPageWikiPageAttachment
      parameters:
      - name: wikiPageId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MultipartBody'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WikiPageAttachment'
            application/xml:
              schema:
                $ref: '#/components/schemas/WikiPageAttachment'
  /v1.0/wiki-page-attachments/batch:
    delete:
      tags:
      - WikiPageAttachment
      operationId: deleteWikiPageAttachmentBatch
      parameters:
      - name: callbackURL
        in: query
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1.0/wiki-pages/{wikiPageId}/wiki-page-attachments/batch:
    post:
      tags:
      - WikiPageAttachment
      operationId: postWikiPageWikiPageAttachmentBatch
      parameters:
      - name: wikiPageId
        in: path
        required: true
        schema:
          type: string
      - name: callbackURL
        in: query
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MultipartBody'
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1.0/wiki-pages/{parentWikiPageId}/wiki-pages:
    get:
      tags:
      - WikiPage
      description: Retrieves the child wiki page's of a wiki page.
      operationId: getWikiPageWikiPagesPage
      parameters:
      - name: parentWikiPageId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageWikiPage'
            application/xml:
              schema:
                $ref: '#/components/schemas/PageWikiPage'
    post:
      tags:
      - WikiPage
      description: Creates a child wiki page of the parent wiki page.
      operationId: postWikiPageWikiPage
      parameters:
      - name: parentWikiPageId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WikiPage'
          application/xml:
            schema:
              $ref: '#/components/schemas/WikiPage'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WikiPage'
            application/xml:
              schema:
                $ref: '#/components/schemas/WikiPage'
  /v1.0/wiki-nodes/{wikiNodeId}/wiki-pages:
    get:
      tags:
      - WikiPage
      description: Retrieves the wiki page's of a node. Results can be paginated,
        filtered, searched, and sorted.
      operationId: getWikiNodeWikiPagesPage
      parameters:
      - name: wikiNodeId
        in: path
        required: true
        schema:
          type: string
      - name: search
        in: query
        schema:
          type: string
      - name: filter
        in: query
        schema:
          type: string
      - name: page
        in: query
        schema:
          type: string
      - name: pageSize
        in: query
        schema:
          type: string
      - name: sort
        in: query
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageWikiPage'
            application/xml:
              schema:
                $ref: '#/components/schemas/PageWikiPage'
    post:
      tags:
      - WikiPage
      description: Creates a new wiki page
      operationId: postWikiNodeWikiPage
      parameters:
      - name: wikiNodeId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WikiPage'
          application/xml:
            schema:
              $ref: '#/components/schemas/WikiPage'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WikiPage'
            application/xml:
              schema:
                $ref: '#/components/schemas/WikiPage'
  /v1.0/wiki-page/{wikiPageId}/subscribe:
    put:
      tags:
      - WikiPage
      operationId: putWikiPageSubscribe
      parameters:
      - name: wikiPageId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
            application/xml: {}
  /v1.0/wiki-pages/{wikiPageId}:
    get:
      tags:
      - WikiPage
      description: Retrieves the wiki page
      operationId: getWikiPage
      parameters:
      - name: wikiPageId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WikiPage'
            application/xml:
              schema:
                $ref: '#/components/schemas/WikiPage'
    put:
      tags:
      - WikiPage
      description: Replaces the wiki page with the information sent in the request
        body. Any missing fields are deleted, unless they are required.
      operationId: putWikiPage
      parameters:
      - name: wikiPageId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WikiPage'
          application/xml:
            schema:
              $ref: '#/components/schemas/WikiPage'
      responses:
        default:
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WikiPage'
            application/xml:
              schema:
                $ref: '#/components/schemas/WikiPage'
    delete:
      tags:
      - WikiPage
      description: Deletes the wiki page and returns a 204 if the operation succeeds.
      operationId: deleteWikiPage
      parameters:
      - name: wikiPageId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
            application/xml: {}
  /v1.0/wiki-page/{wikiPageId}/unsubscribe:
    put:
      tags:
      - WikiPage
      operationId: putWikiPageUnsubscribe
      parameters:
      - name: wikiPageId
        in: path
        required: true
        schema:
          type: string
      responses:
        default:
          description: default response
          content:
            application/json: {}
            application/xml: {}
  /v1.0/wiki-nodes/{wikiNodeId}/wiki-pages/batch:
    post:
      tags:
      - WikiPage
      operationId: postWikiNodeWikiPageBatch
      parameters:
      - name: wikiNodeId
        in: path
        required: true
        schema:
          type: string
      - name: callbackURL
        in: query
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        default:
          description: default response
          content:
            application/json: {}
  /v1.0/wiki-pages/batch:
    put:
      tags:
      - WikiPage
      operationId: putWikiPageBatch
      parameters:
      - name: callbackURL
        in: query
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        default:
          description: default response
          content:
            application/json: {}
    delete:
      tags:
      - WikiPage
      operationId: deleteWikiPageBatch
      parameters:
      - name: callbackURL
        in: query
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
      responses:
        default:
          description: default response
          content:
            application/json: {}
components:
  schemas:
    BlogPostingImage:
      type: object
      properties:
        contentUrl:
          type: string
          description: The image's relative URL.
          readOnly: true
        encodingFormat:
          type: string
          description: The image's content type (e.g., `application/png`, etc.).
          readOnly: true
        fileExtension:
          type: string
          description: The image's file extension.
          readOnly: true
        id:
          type: integer
          description: The image's ID.
          format: int64
          readOnly: true
        sizeInBytes:
          type: integer
          description: The image's size in bytes.
          format: int64
          readOnly: true
        title:
          type: string
          description: The image's title text.
        viewableBy:
          type: string
          writeOnly: true
          enum:
          - Anyone
          - Members
          - Owner
        x-class-name:
          type: string
          default: com.liferay.headless.delivery.dto.v1_0.BlogPostingImage
      xml:
        name: BlogPostingImage
    PageBlogPostingImage:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/BlogPostingImage'
        totalCount:
          type: integer
          format: int64
        lastPage:
          type: integer
          format: int64
        page:
          type: integer
          format: int64
        pageSize:
          type: integer
          format: int64
        actions:
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              type: string
    MultipartBody:
      type: object
      properties:
        values:
          type: object
          additionalProperties:
            type: string
    Creator:
      type: object
      properties:
        additionalName:
          type: string
          description: The author's additional name (e.g., middle name).
          readOnly: true
        contentType:
          type: string
          description: The type of the content.
          readOnly: true
        familyName:
          type: string
          description: The author's surname.
          readOnly: true
        givenName:
          type: string
          description: The author's first name.
          readOnly: true
        id:
          type: integer
          description: The author's ID.
          format: int64
          readOnly: true
        image:
          type: string
          description: A relative URL to the author's profile image.
          readOnly: true
        name:
          type: string
          description: The author's full name.
          readOnly: true
        profileURL:
          type: string
          description: A relative URL to the author's user profile.
          readOnly: true
        x-class-name:
          type: string
          default: com.liferay.headless.delivery.dto.v1_0.Creator
      description: The wiki page's creator.
      xml:
        name: Creator
    Rating:
      type: object
      properties:
        actions:
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              type: string
          readOnly: true
        bestRating:
          type: number
          description: The best possible rating an asset can receive (normalized to
            1.0 by default).
          format: double
          readOnly: true
        creator:
          $ref: '#/components/schemas/Creator'
        dateCreated:
          type: string
          description: The rating's creation date.
          format: date-time
          readOnly: true
        dateModified:
          type: string
          description: The last time a field of the rating changed.
          format: date-time
          readOnly: true
        id:
          type: integer
          description: The rating's ID.
          format: int64
          readOnly: true
        ratingValue:
          type: number
          description: The rating's value.
          format: double
        worstRating:
          type: number
          description: The worst possible rating an asset can receive (normalized
            to 0.0 by default).
          format: double
          readOnly: true
        x-class-name:
          type: string
          default: com.liferay.headless.delivery.dto.v1_0.Rating
      xml:
        name: Rating
    AggregateRating:
      type: object
      properties:
        bestRating:
          type: number
          description: The highest possible rating (by default normalized to 1.0).
          format: double
          readOnly: true
        ratingAverage:
          type: number
          description: The average rating.
          format: double
          readOnly: true
        ratingCount:
          type: integer
          description: The number of ratings.
          format: int32
          readOnly: true
        ratingValue:
          type: number
          description: The rating value.
          format: double
          readOnly: true
        worstRating:
          type: number
          description: The lowest possible rating (by default normalized to 0.0).
          format: double
          readOnly: true
        x-class-name:
          type: string
          default: com.liferay.headless.delivery.dto.v1_0.AggregateRating
      description: The blog post's average rating.
      xml:
        name: AggregateRating
    BlogPosting:
      required:
      - articleBody
      - headline
      type: object
      properties:
        actions:
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              type: string
          readOnly: true
        aggregateRating:
          $ref: '#/components/schemas/AggregateRating'
        alternativeHeadline:
          type: string
          description: The blog post's subtitle.
        articleBody:
          type: string
          description: The blog post's body (content).
        creator:
          $ref: '#/components/schemas/Creator'
        customFields:
          type: array
          items:
            $ref: '#/components/schemas/CustomField'
        dateCreated:
          type: string
          description: The blog post's creation date.
          format: date-time
          readOnly: true
        dateModified:
          type: string
          description: The blog post's most recent modification date.
          format: date-time
          readOnly: true
        datePublished:
          type: string
          description: The blog post's publication date.
          format: date-time
        description:
          type: string
          description: The blog post's description.
        encodingFormat:
          type: string
          description: The blog post's media format (e.g., HTML, BBCode, etc.).
          readOnly: true
        friendlyUrlPath:
          type: string
          description: The blog post's relative URL.
        headline:
          type: string
          description: The blog post's main title.
        id:
          type: integer
          description: The blog post's identifier.
          format: int64
          readOnly: true
        image:
          $ref: '#/components/schemas/Image'
        keywords:
          type: array
          description: A list of keywords describing the blog post.
          items:
            type: string
            description: A list of keywords describing the blog post.
        numberOfComments:
          type: integer
          description: The number of comments this blog post has received.
          format: int32
          readOnly: true
        relatedContents:
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/RelatedContent'
        siteId:
          type: integer
          description: The ID of the site to which this blog post is scoped.
          format: int64
          readOnly: true
        taxonomyCategories:
          type: array
          description: The categories associated with this blog post.
          readOnly: true
          items:
            $ref: '#/components/schemas/TaxonomyCategory'
        taxonomyCategoryIds:
          type: array
          writeOnly: true
          items:
            type: integer
            format: int64
        viewableBy:
          type: string
          writeOnly: true
          enum:
          - Anyone
          - Members
          - Owner
        x-class-name:
          type: string
          default: com.liferay.headless.delivery.dto.v1_0.BlogPosting
      xml:
        name: BlogPosting
    CustomField:
      type: object
      properties:
        customValue:
          $ref: '#/components/schemas/CustomValue'
        dataType:
          type: string
          description: The field type (e.g., image, text, etc.).
          readOnly: true
        name:
          type: string
          description: The field's internal name. This is valid for comparisons and
            unique in the structured content.
        x-class-name:
          type: string
          default: com.liferay.headless.delivery.dto.v1_0.CustomField
      xml:
        name: CustomField
    CustomValue:
      type: object
      properties:
        data:
          type: object
          description: The field's content for simple types.
        data_i18n:
          type: object
          additionalProperties:
            type: string
        geo:
          $ref: '#/components/schemas/Geo'
        x-class-name:
          type: string
          default: com.liferay.headless.delivery.dto.v1_0.CustomValue
      xml:
        name: CustomValue
    Geo:
      type: object
      properties:
        latitude:
          type: number
          description: The latitude of a point in space.
          format: double
        longitude:
          type: number
          description: The longitude of a point in space.
          format: double
        x-class-name:
          type: string
          default: com.liferay.headless.delivery.dto.v1_0.Geo
      description: A point determined by latitude and longitude.
      xml:
        name: Geo
    Image:
      type: object
      properties:
        caption:
          type: string
          description: The text describing the image.
        contentUrl:
          type: string
          description: The image's relative URL.
          readOnly: true
        imageId:
          type: integer
          description: The image's ID. This can be used to retrieve more information
            in the `Document` API.
          format: int64
        x-class-name:
          type: string
          default: com.liferay.headless.delivery.dto.v1_0.Image
      description: The blog post's cover image.
      xml:
        name: Image
    RelatedContent:
      type: object
      properties:
        contentType:
          type: string
          description: The type of the content.
          readOnly: true
        id:
          type: integer
          description: The identifier of the resource.
          format: int64
          readOnly: true
        title:
          type: string
          description: The title of the content.
          readOnly: true
        x-class-name:
          type: string
          default: com.liferay.headless.delivery.dto.v1_0.RelatedContent
      xml:
        name: RelatedContent
    TaxonomyCategory:
      type: object
      properties:
        taxonomyCategoryId:
          type: integer
          description: The category's ID. This can be used to retrieve more information
            in the `TaxonomyCategory` API.
          format: int64
          readOnly: true
        taxonomyCategoryName:
          type: string
          description: The category's name.
          readOnly: true
        taxonomyCategoryName_i18n:
          type: object
          additionalProperties:
            type: string
          readOnly: true
        x-class-name:
          type: string
          default: com.liferay.headless.delivery.dto.v1_0.TaxonomyCategory
      description: The categories associated with this blog post.
      xml:
        name: TaxonomyCategory
    PageBlogPosting:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/BlogPosting'
        totalCount:
          type: integer
          format: int64
        lastPage:
          type: integer
          format: int64
        page:
          type: integer
          format: int64
        pageSize:
          type: integer
          format: int64
        actions:
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              type: string
    Comment:
      type: object
      properties:
        actions:
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              type: string
          readOnly: true
        creator:
          $ref: '#/components/schemas/Creator'
        dateCreated:
          type: string
          description: The comment's creation date.
          format: date-time
          readOnly: true
        dateModified:
          type: string
          description: The comment's latest modification date.
          format: date-time
          readOnly: true
        id:
          type: integer
          description: The comment's ID.
          format: int64
          readOnly: true
        numberOfComments:
          type: integer
          description: The number of child comments on this comment.
          format: int32
          readOnly: true
        text:
          type: string
          description: The comment's text content.
        x-class-name:
          type: string
          default: com.liferay.headless.delivery.dto.v1_0.Comment
      xml:
        name: Comment
    PageComment:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
        totalCount:
          type: integer
          format: int64
        lastPage:
          type: integer
          format: int64
        page:
          type: integer
          format: int64
        pageSize:
          type: integer
          format: int64
        actions:
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              type: string
    ContentSetElement:
      type: object
      properties:
        content:
          type: object
          description: The content's fields.
          readOnly: true
        contentType:
          type: string
          description: The content set element's type.
          readOnly: true
        id:
          type: integer
          description: The content set element's ID.
          format: int64
          readOnly: true
        title:
          type: string
          description: The content's title.
          readOnly: true
        title_i18n:
          type: object
          additionalProperties:
            type: string
          readOnly: true
        x-class-name:
          type: string
          default: com.liferay.headless.delivery.dto.v1_0.ContentSetElement
      xml:
        name: ContentSetElement
    PageContentSetElement:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/ContentSetElement'
        totalCount:
          type: integer
          format: int64
        lastPage:
          type: integer
          format: int64
        page:
          type: integer
          format: int64
        pageSize:
          type: integer
          format: int64
        actions:
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              type: string
    ContentStructure:
      type: object
      properties:
        availableLanguages:
          type: array
          description: The list of languages the structure has a translation for.
          readOnly: true
          items:
            type: string
            description: The list of languages the structure has a translation for.
        contentStructureFields:
          type: array
          description: The list of the content structure's fields.
          readOnly: true
          items:
            $ref: '#/components/schemas/ContentStructureField'
        creator:
          $ref: '#/components/schemas/Creator'
        dateCreated:
          type: string
          description: The content structure's creation date.
          format: date-time
          readOnly: true
        dateModified:
          type: string
          description: The last time a field of the content structure changed.
          format: date-time
          readOnly: true
        description:
          type: string
          description: The content structure's description.
          readOnly: true
        description_i18n:
          type: object
          additionalProperties:
            type: string
          readOnly: true
        id:
          type: integer
          description: The content structure's ID.
          format: int64
          readOnly: true
        name:
          type: string
          description: The content structure's name.
          readOnly: true
        name_i18n:
          type: object
          additionalProperties:
            type: string
          readOnly: true
        siteId:
          type: integer
          description: The ID of the site to which the content structure is scoped.
          format: int64
          readOnly: true
        x-class-name:
          type: string
          default: com.liferay.headless.delivery.dto.v1_0.ContentStructure
      xml:
        name: ContentStructure
    ContentStructureField:
      type: object
      properties:
        dataType:
          type: string
          description: The form field's type (e.g., date, geolocation, text, etc.).
          readOnly: true
        inputControl:
          type: string
          description: The form field's input control type (e.g., text, textarea,
            select field, etc.).
          readOnly: true
        label:
          type: string
          description: The form field's label.
          readOnly: true
        label_i18n:
          type: object
          additionalProperties:
            type: string
          readOnly: true
        localizable:
          type: boolean
          description: A flag that indicates whether the content is accessible in
            different languages.
          readOnly: true
        multiple:
          type: boolean
          description: A flag that indicates whether the form field can have several
            values.
          readOnly: true
        name:
          type: string
          description: The form field's name.
          readOnly: true
        nestedContentStructureFields:
          type: array
          description: The child content structure fields that depend on this form
            field.
          readOnly: true
          items:
            $ref: '#/components/schemas/ContentStructureField'
        options:
          type: array
          description: The list of different possible values.
          readOnly: true
          items:
            $ref: '#/components/schemas/Option'
        predefinedValue:
          type: string
          description: The form field's default value.
          readOnly: true
        predefinedValue_i18n:
          type: object
          additionalProperties:
            type: string
          readOnly: true
        repeatable:
          type: boolean
          description: A flag that indicates whether this content can be rendered
            (and answered) several times.
          readOnly: true
        required:
          type: boolean
          description: A flag that indicates whether this form field is required.
          readOnly: true
        showLabel:
          type: boolean
          description: A flag that indicates whether the structure's end target should
            render the field label.
          readOnly: true
        x-class-name:
          type: string
          default: com.liferay.headless.delivery.dto.v1_0.ContentStructureField
      description: The list of the content structure's fields.
      xml:
        name: ContentStructureField
    Option:
      type: object
      properties:
        label:
          type: string
          description: The option's label.
        label_i18n:
          type: object
          additionalProperties:
            type: string
        value:
          type: string
          description: The internal value of the field option.
        x-class-name:
          type: string
          default: com.liferay.headless.delivery.dto.v1_0.Option
      description: The list of different possible values.
      xml:
        name: Option
    PageContentStructure:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/ContentStructure'
        totalCount:
          type: integer
          format: int64
        lastPage:
          type: integer
          format: int64
        page:
          type: integer
          format: int64
        pageSize:
          type: integer
          format: int64
        actions:
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              type: string
    DocumentFolder:
      required:
      - name
      type: object
      properties:
        actions:
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              type: string
          readOnly: true
        creator:
          $ref: '#/components/schemas/Creator'
        customFields:
          type: array
          items:
            $ref: '#/components/schemas/CustomField'
        dateCreated:
          type: string
          description: The folder's creation date.
          format: date-time
          readOnly: true
        dateModified:
          type: string
          description: The last time a field of the folder changed.
          format: date-time
          readOnly: true
        description:
          type: string
          description: The folder's description.
        id:
          type: integer
          description: The folder's ID.
          format: int64
          readOnly: true
        name:
          type: string
          description: The folder's main title/name.
        numberOfDocumentFolders:
          type: integer
          description: The number of this folder's child folders.
          format: int32
          readOnly: true
        numberOfDocuments:
          type: integer
          description: The number of documents in this folder.
          format: int32
          readOnly: true
        siteId:
          type: integer
          description: The ID of the site to which this folder is scoped.
          format: int64
          readOnly: true
        subscribed:
          type: boolean
          readOnly: true
        viewableBy:
          type: string
          writeOnly: true
          enum:
          - Anyone
          - Members
          - Owner
        x-class-name:
          type: string
          default: com.liferay.headless.delivery.dto.v1_0.DocumentFolder
      xml:
        name: DocumentFolder
    PageDocumentFolder:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/DocumentFolder'
        totalCount:
          type: integer
          format: int64
        lastPage:
          type: integer
          format: int64
        page:
          type: integer
          format: int64
        pageSize:
          type: integer
          format: int64
        actions:
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              type: string
    AdaptedImage:
      type: object
      properties:
        contentUrl:
          type: string
          description: The image's relative URL.
        height:
          type: integer
          description: The image's height in pixels.
          format: int32
        resolutionName:
          type: string
          description: The name of the image's Adaptive Media image resolution.
        sizeInBytes:
          type: integer
          description: The image's size in bytes.
          format: int64
        width:
          type: integer
          description: The image's width in pixels.
          format: int32
        x-class-name:
          type: string
          default: com.liferay.headless.delivery.dto.v1_0.AdaptedImage
      description: An array of images in several resolutions and sizes, created by
        the Adaptive Media framework.
      xml:
        name: AdaptedImage
    Document:
      type: object
      properties:
        actions:
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              type: string
          readOnly: true
        adaptedImages:
          type: array
          description: An array of images in several resolutions and sizes, created
            by the Adaptive Media framework.
          readOnly: true
          items:
            $ref: '#/components/schemas/AdaptedImage'
        aggregateRating:
          $ref: '#/components/schemas/AggregateRating'
        contentUrl:
          type: string
          description: The document's relative URL.
          readOnly: true
        creator:
          $ref: '#/components/schemas/Creator'
        customFields:
          type: array
          items:
            $ref: '#/components/schemas/CustomField'
        dateCreated:
          type: string
          description: The document's creation date.
          format: date-time
          readOnly: true
        dateModified:
          type: string
          description: The last time a field of the document changed.
          format: date-time
          readOnly: true
        description:
          type: string
          description: The document's description.
        documentFolderId:
          type: integer
          description: The ID of the `DocumentFolder` where this document is stored.
          format: int64
          readOnly: true
        encodingFormat:
          type: string
          description: The document's content type (e.g., `application/pdf`, etc.).
          readOnly: true
        fileExtension:
          type: string
          description: The document's file extension.
          readOnly: true
        id:
          type: integer
          description: The document's ID.
          format: int64
          readOnly: true
        keywords:
          type: array
          description: A list of keywords describing the document.
          items:
            type: string
            description: A list of keywords describing the document.
        numberOfComments:
          type: integer
          description: The number of comments on the document.
          format: int32
          readOnly: true
        relatedContents:
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/RelatedContent'
        sizeInBytes:
          type: integer
          description: The document's size in bytes.
          format: int64
          readOnly: true
        taxonomyCategories:
          type: array
          description: The categories associated with this document.
          readOnly: true
          items:
            $ref: '#/components/schemas/TaxonomyCategory'
        taxonomyCategoryIds:
          type: array
          writeOnly: true
          items:
            type: integer
            format: int64
        title:
          type: string
          description: The document's main title/name.
        viewableBy:
          type: string
          writeOnly: true
          enum:
          - Anyone
          - Members
          - Owner
        x-class-name:
          type: string
          default: com.liferay.headless.delivery.dto.v1_0.Document
      xml:
        name: Document
    PageDocument:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Document'
        totalCount:
          type: integer
          format: int64
        lastPage:
          type: integer
          format: int64
        page:
          type: integer
          format: int64
        pageSize:
          type: integer
          format: int64
        actions:
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              type: string
    KnowledgeBaseArticle:
      required:
      - articleBody
      - title
      type: object
      properties:
        actions:
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              type: string
          readOnly: true
        aggregateRating:
          $ref: '#/components/schemas/AggregateRating'
        articleBody:
          type: string
          description: The article's main content.
        creator:
          $ref: '#/components/schemas/Creator'
        customFields:
          type: array
          items:
            $ref: '#/components/schemas/CustomField'
        dateCreated:
          type: string
          description: The date the article was created.
          format: date-time
          readOnly: true
        dateModified:
          type: string
          description: The last time the article's content or metadata changed.
          format: date-time
          readOnly: true
        description:
          type: string
          description: The article's description.
        encodingFormat:
          type: string
          description: The article's media type (e.g., HTML, BBCode, etc.).
          readOnly: true
        friendlyUrlPath:
          type: string
          description: The article's relative URL.
        id:
          type: integer
          description: The article's ID.
          format: int64
          readOnly: true
        keywords:
          type: array
          description: A list of keywords describing the article.
          items:
            type: string
            description: A list of keywords describing the article.
        numberOfAttachments:
          type: integer
          description: The article's number attachments.
          format: int32
          readOnly: true
        numberOfKnowledgeBaseArticles:
          type: integer
          description: The number of this article's child articles.
          format: int32
          readOnly: true
        parentKnowledgeBaseFolder:
          $ref: '#/components/schemas/ParentKnowledgeBaseFolder'
        parentKnowledgeBaseFolderId:
          type: integer
          format: int64
          writeOnly: true
        relatedContents:
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/RelatedContent'
        siteId:
          type: integer
          description: The ID of the site to which this article is scoped.
          format: int64
          readOnly: true
        subscribed:
          type: boolean
          readOnly: true
        taxonomyCategories:
          type: array
          description: The categories associated with this article.
          readOnly: true
          items:
            $ref: '#/components/schemas/TaxonomyCategory'
        taxonomyCategoryIds:
          type: array
          writeOnly: true
          items:
            type: integer
            format: int64
        title:
          type: string
          description: The article's main title.
        viewableBy:
          type: string
          writeOnly: true
          enum:
          - Anyone
          - Members
          - Owner
        x-class-name:
          type: string
          default: com.liferay.headless.delivery.dto.v1_0.KnowledgeBaseArticle
      xml:
        name: KnowledgeBaseArticle
    ParentKnowledgeBaseFolder:
      type: object
      properties:
        folderId:
          type: integer
          description: The parent folder's ID.
          format: int64
        folderName:
          type: string
          description: The parent folder's name.
        x-class-name:
          type: string
          default: com.liferay.headless.delivery.dto.v1_0.ParentKnowledgeBaseFolder
      description: The folder's parent Knowledge Base folder, if it exists.
      xml:
        name: ParentKnowledgeBaseFolder
    PageKnowledgeBaseArticle:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/KnowledgeBaseArticle'
        totalCount:
          type: integer
          format: int64
        lastPage:
          type: integer
          format: int64
        page:
          type: integer
          format: int64
        pageSize:
          type: integer
          format: int64
        actions:
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              type: string
    KnowledgeBaseAttachment:
      type: object
      properties:
        contentUrl:
          type: string
          description: The file's relative URL.
          readOnly: true
        encodingFormat:
          type: string
          description: The file's media type (e.g., application/pdf, etc.).
          readOnly: true
        fileExtension:
          type: string
          description: The file's extension.
          readOnly: true
        id:
          type: integer
          description: The file's ID.
          format: int64
          readOnly: true
        sizeInBytes:
          type: integer
          description: The file's size in bytes.
          format: int64
          readOnly: true
        title:
          type: string
          description: The file's main title.
        x-class-name:
          type: string
          default: com.liferay.headless.delivery.dto.v1_0.KnowledgeBaseAttachment
      xml:
        name: KnowledgeBaseAttachment
    PageKnowledgeBaseAttachment:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/KnowledgeBaseAttachment'
        totalCount:
          type: integer
          format: int64
        lastPage:
          type: integer
          format: int64
        page:
          type: integer
          format: int64
        pageSize:
          type: integer
          format: int64
        actions:
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              type: string
    KnowledgeBaseFolder:
      required:
      - name
      type: object
      properties:
        actions:
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              type: string
          readOnly: true
        creator:
          $ref: '#/components/schemas/Creator'
        customFields:
          type: array
          items:
            $ref: '#/components/schemas/CustomField'
        dateCreated:
          type: string
          description: The date the folder was created.
          format: date-time
          readOnly: true
        dateModified:
          type: string
          description: The last time the folder was modified.
          format: date-time
          readOnly: true
        description:
          type: string
          description: The folder's description.
        id:
          type: integer
          description: The folder's ID.
          format: int64
          readOnly: true
        name:
          type: string
          description: The folder's main title/name.
        numberOfKnowledgeBaseArticles:
          type: integer
          description: The number of Knowledge Base articles in this folder.
          format: int32
          readOnly: true
        numberOfKnowledgeBaseFolders:
          type: integer
          description: The number of Knowledge Base folders in this folder.
          format: int32
          readOnly: true
        parentKnowledgeBaseFolder:
          $ref: '#/components/schemas/ParentKnowledgeBaseFolder'
        parentKnowledgeBaseFolderId:
          type: integer
          format: int64
          writeOnly: true
        siteId:
          type: integer
          description: The ID of the site to which this folder is scoped.
          format: int64
          readOnly: true
        viewableBy:
          type: string
          writeOnly: true
          enum:
          - Anyone
          - Members
          - Owner
        x-class-name:
          type: string
          default: com.liferay.headless.delivery.dto.v1_0.KnowledgeBaseFolder
      xml:
        name: KnowledgeBaseFolder
    PageKnowledgeBaseFolder:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/KnowledgeBaseFolder'
        totalCount:
          type: integer
          format: int64
        lastPage:
          type: integer
          format: int64
        page:
          type: integer
          format: int64
        pageSize:
          type: integer
          format: int64
        actions:
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              type: string
    MessageBoardAttachment:
      type: object
      properties:
        contentUrl:
          type: string
          description: The file's relative URL.
          readOnly: true
        encodingFormat:
          type: string
          description: The file's media format (e.g., application/pdf, etc.).
          readOnly: true
        fileExtension:
          type: string
          description: The file's extension.
          readOnly: true
        id:
          type: integer
          description: The file's ID.
          format: int64
          readOnly: true
        sizeInBytes:
          type: integer
          description: The file's size in bytes.
          format: int64
          readOnly: true
        title:
          type: string
          description: The file's title.
        x-class-name:
          type: string
          default: com.liferay.headless.delivery.dto.v1_0.MessageBoardAttachment
      xml:
        name: MessageBoardAttachment
    PageMessageBoardAttachment:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/MessageBoardAttachment'
        totalCount:
          type: integer
          format: int64
        lastPage:
          type: integer
          format: int64
        page:
          type: integer
          format: int64
        pageSize:
          type: integer
          format: int64
        actions:
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              type: string
    MessageBoardMessage:
      type: object
      properties:
        actions:
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              type: string
          readOnly: true
        aggregateRating:
          $ref: '#/components/schemas/AggregateRating'
        anonymous:
          type: boolean
          description: A flag that indicates whether the message's author is anonymous.
        articleBody:
          type: string
          description: The message's main content.
        creator:
          $ref: '#/components/schemas/Creator'
        customFields:
          type: array
          items:
            $ref: '#/components/schemas/CustomField'
        dateCreated:
          type: string
          description: The date the message was created.
          format: date-time
          readOnly: true
        dateModified:
          type: string
          description: The last time the content or metadata of the message was changed.
          format: date-time
          readOnly: true
        encodingFormat:
          type: string
          description: The message's media format (e.g., HTML, BBCode, etc.).
          readOnly: true
        headline:
          type: string
          description: The message's main title.
        id:
          type: integer
          description: The message's ID.
          format: int64
          readOnly: true
        keywords:
          type: array
          description: A list of keywords describing the message.
          items:
            type: string
            description: A list of keywords describing the message.
        messageBoardThreadId:
          type: integer
          description: The ID of the Message Board Thread to which this message is
            scoped.
          format: int64
          readOnly: true
        numberOfMessageBoardAttachments:
          type: integer
          description: The number of the message's attachments.
          format: int32
          readOnly: true
        numberOfMessageBoardMessages:
          type: integer
          description: The number of the message's child messages.
          format: int32
          readOnly: true
        relatedContents:
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/RelatedContent'
        showAsAnswer:
          type: boolean
          description: A flag that indicates whether the message is answering a question.
        siteId:
          type: integer
          description: The ID of the site to which this message is scoped.
          format: int64
          readOnly: true
        subscribed:
          type: boolean
          readOnly: true
        viewableBy:
          type: string
          writeOnly: true
          enum:
          - Anyone
          - Members
          - Owner
        x-class-name:
          type: string
          default: com.liferay.headless.delivery.dto.v1_0.MessageBoardMessage
      xml:
        name: MessageBoardMessage
    PageMessageBoardMessage:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/MessageBoardMessage'
        totalCount:
          type: integer
          format: int64
        lastPage:
          type: integer
          format: int64
        page:
          type: integer
          format: int64
        pageSize:
          type: integer
          format: int64
        actions:
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              type: string
    MessageBoardSection:
      required:
      - title
      type: object
      properties:
        actions:
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              type: string
          readOnly: true
        creator:
          $ref: '#/components/schemas/Creator'
        customFields:
          type: array
          items:
            $ref: '#/components/schemas/CustomField'
        dateCreated:
          type: string
          description: The date the section was created.
          format: date-time
          readOnly: true
        dateModified:
          type: string
          description: The last time the section was changed.
          format: date-time
          readOnly: true
        description:
          type: string
          description: The section's description.
        id:
          type: integer
          description: The section's ID.
          format: int64
          readOnly: true
        numberOfMessageBoardSections:
          type: integer
          description: The number of this section's child sections.
          format: int32
          readOnly: true
        numberOfMessageBoardThreads:
          type: integer
          description: The number of message board threads in this section.
          format: int32
          readOnly: true
        siteId:
          type: integer
          description: The ID of the site to which this section is scoped.
          format: int64
          readOnly: true
        subscribed:
          type: boolean
          readOnly: true
        title:
          type: string
          description: The section's main title.
        viewableBy:
          type: string
          writeOnly: true
          enum:
          - Anyone
          - Members
          - Owner
        x-class-name:
          type: string
          default: com.liferay.headless.delivery.dto.v1_0.MessageBoardSection
      xml:
        name: MessageBoardSection
    PageMessageBoardSection:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/MessageBoardSection'
        totalCount:
          type: integer
          format: int64
        lastPage:
          type: integer
          format: int64
        page:
          type: integer
          format: int64
        pageSize:
          type: integer
          format: int64
        actions:
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              type: string
    MessageBoardThread:
      required:
      - headline
      type: object
      properties:
        actions:
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              type: string
          readOnly: true
        aggregateRating:
          $ref: '#/components/schemas/AggregateRating'
        articleBody:
          type: string
          description: The thread's main body content (the message written as the
            thread's description).
        creator:
          $ref: '#/components/schemas/Creator'
        customFields:
          type: array
          items:
            $ref: '#/components/schemas/CustomField'
        dateCreated:
          type: string
          description: The date the thread was created.
          format: date-time
          readOnly: true
        dateModified:
          type: string
          description: The last time any field of the thread changed.
          format: date-time
          readOnly: true
        encodingFormat:
          type: string
          description: The media format of the thread's content (e.g., HTML, BBCode,
            etc.).
          readOnly: true
        headline:
          type: string
          description: The thread's main title.
        id:
          type: integer
          description: The thread's ID.
          format: int64
          readOnly: true
        keywords:
          type: array
          description: A list of keywords describing the thread.
          items:
            type: string
            description: A list of keywords describing the thread.
        numberOfMessageBoardAttachments:
          type: integer
          description: The number of the thread's attachments.
          format: int32
          readOnly: true
        numberOfMessageBoardMessages:
          type: integer
          description: The number of the thread's messages.
          format: int32
          readOnly: true
        relatedContents:
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/RelatedContent'
        showAsQuestion:
          type: boolean
          description: A flag that indicates whether this thread was posted as a question
            that can receive approved answers.
        siteId:
          type: integer
          description: The ID of the site to which this thread is scoped.
          format: int64
          readOnly: true
        subscribed:
          type: boolean
          readOnly: true
        threadType:
          type: string
          description: The thread's type.
        viewCount:
          type: integer
          description: The number of views of this thread.
          format: int32
          readOnly: true
        viewableBy:
          type: string
          writeOnly: true
          enum:
          - Anyone
          - Members
          - Owner
        x-class-name:
          type: string
          default: com.liferay.headless.delivery.dto.v1_0.MessageBoardThread
      xml:
        name: MessageBoardThread
    PageMessageBoardThread:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/MessageBoardThread'
        totalCount:
          type: integer
          format: int64
        lastPage:
          type: integer
          format: int64
        page:
          type: integer
          format: int64
        pageSize:
          type: integer
          format: int64
        actions:
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              type: string
    PageStructuredContentFolder:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/StructuredContentFolder'
        totalCount:
          type: integer
          format: int64
        lastPage:
          type: integer
          format: int64
        page:
          type: integer
          format: int64
        pageSize:
          type: integer
          format: int64
        actions:
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              type: string
    StructuredContentFolder:
      required:
      - name
      type: object
      properties:
        actions:
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              type: string
          readOnly: true
        creator:
          $ref: '#/components/schemas/Creator'
        customFields:
          type: array
          items:
            $ref: '#/components/schemas/CustomField'
        dateCreated:
          type: string
          description: The date the folder was created.
          format: date-time
          readOnly: true
        dateModified:
          type: string
          description: The last time any of the folder's fields changed.
          format: date-time
          readOnly: true
        description:
          type: string
          description: The folder's description.
        id:
          type: integer
          description: The folder's ID.
          format: int64
          readOnly: true
        name:
          type: string
          description: The folder's name.
        numberOfStructuredContentFolders:
          type: integer
          description: The number of structured content folders inside this folder.
          format: int32
          readOnly: true
        numberOfStructuredContents:
          type: integer
          description: The number of structured content objects inside this folder.
          format: int32
          readOnly: true
        siteId:
          type: integer
          description: The ID of the site to which this folder is scoped.
          format: int64
          readOnly: true
        subscribed:
          type: boolean
          readOnly: true
        viewableBy:
          type: string
          writeOnly: true
          enum:
          - Anyone
          - Members
          - Owner
        x-class-name:
          type: string
          default: com.liferay.headless.delivery.dto.v1_0.StructuredContentFolder
      xml:
        name: StructuredContentFolder
    ContentDocument:
      type: object
      properties:
        actions:
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              type: string
          readOnly: true
        contentType:
          type: string
          readOnly: true
        contentUrl:
          type: string
          description: The document's relative URL.
          readOnly: true
        description:
          type: string
          description: The document's description.
        encodingFormat:
          type: string
          description: The document's content type (e.g., `application/pdf`, etc.).
          readOnly: true
        fileExtension:
          type: string
          description: The document's file extension.
          readOnly: true
        id:
          type: integer
          description: The document's ID.
          format: int64
        sizeInBytes:
          type: integer
          description: The document's file size in bytes.
          format: int64
          readOnly: true
        title:
          type: string
          description: The document's title.
        x-class-name:
          type: string
          default: com.liferay.headless.delivery.dto.v1_0.ContentDocument
      description: A content document element that stores an image file.
      xml:
        name: ContentDocument
    ContentField:
      type: object
      properties:
        dataType:
          type: string
          description: The field type (e.g., image, text, etc.).
          readOnly: true
        inputControl:
          type: string
          description: The field's control type (e.g., text, text area, etc.).
          readOnly: true
        label:
          type: string
          description: The field's label.
          readOnly: true
        label_i18n:
          type: object
          additionalProperties:
            type: string
        name:
          type: string
          description: The field's internal name. This is valid for comparisons and
            unique in the structured content.
        nestedContentFields:
          type: array
          description: A list of child content fields that depend on this resource.
          items:
            $ref: '#/components/schemas/ContentField'
        repeatable:
          type: boolean
          description: A flag that indicates whether this field can be rendered multiple
            times.
          readOnly: true
        value:
          $ref: '#/components/schemas/Value'
        value_i18n:
          type: object
          additionalProperties:
            type: object
        x-class-name:
          type: string
          default: com.liferay.headless.delivery.dto.v1_0.ContentField
      description: The list of fields that store the structured content's information.
      xml:
        name: ContentField
    PageStructuredContent:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/StructuredContent'
        totalCount:
          type: integer
          format: int64
        lastPage:
          type: integer
          format: int64
        page:
          type: integer
          format: int64
        pageSize:
          type: integer
          format: int64
        actions:
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              type: string
    RenderedContent:
      type: object
      properties:
        renderedContentURL:
          type: string
          description: An absolute URL to the rendered content.
        templateName:
          type: string
          description: The name of the template used to render the content.
        templateName_i18n:
          type: object
          additionalProperties:
            type: string
        x-class-name:
          type: string
          default: com.liferay.headless.delivery.dto.v1_0.RenderedContent
      description: A list of rendered structured content, which results from using
        a template to process the content and return HTML.
      xml:
        name: RenderedContent
    StructuredContent:
      required:
      - title
      type: object
      properties:
        actions:
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              type: string
          readOnly: true
        aggregateRating:
          $ref: '#/components/schemas/AggregateRating'
        availableLanguages:
          type: array
          description: The list of languages the structured content has a translation
            for.
          readOnly: true
          items:
            type: string
            description: The list of languages the structured content has a translation
              for.
        contentFields:
          type: array
          description: The list of fields that store the structured content's information.
          items:
            $ref: '#/components/schemas/ContentField'
        contentStructureId:
          type: integer
          description: The ID of the `ContentStructure`.
          format: int64
        creator:
          $ref: '#/components/schemas/Creator'
        customFields:
          type: array
          items:
            $ref: '#/components/schemas/CustomField'
        dateCreated:
          type: string
          description: The structured content's creation date.
          format: date-time
          readOnly: true
        dateModified:
          type: string
          description: The last time any field of the structured content was changed.
          format: date-time
          readOnly: true
        datePublished:
          type: string
          description: The structured content's most recent publication date.
          format: date-time
        description:
          type: string
          description: The structured content's description.
        description_i18n:
          type: object
          additionalProperties:
            type: string
        friendlyUrlPath:
          type: string
          description: A relative URL to the structured content's rendered content.
        friendlyUrlPath_i18n:
          type: object
          additionalProperties:
            type: string
        id:
          type: integer
          description: The structured content's ID.
          format: int64
          readOnly: true
        key:
          type: string
          description: An identifier, independent of the database, that can be used
            to reference the structured content.
          readOnly: true
        keywords:
          type: array
          description: A list of keywords describing the structured content.
          items:
            type: string
            description: A list of keywords describing the structured content.
        numberOfComments:
          type: integer
          description: The number of comments the structured content has received.
          format: int32
          readOnly: true
        relatedContents:
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/RelatedContent'
        renderedContents:
          type: array
          description: A list of rendered structured content, which results from using
            a template to process the content and return HTML.
          readOnly: true
          items:
            $ref: '#/components/schemas/RenderedContent'
        siteId:
          type: integer
          description: The ID of the site to which this structured content is scoped.
          format: int64
          readOnly: true
        subscribed:
          type: boolean
          readOnly: true
        taxonomyCategories:
          type: array
          description: The categories associated with this structured content.
          readOnly: true
          items:
            $ref: '#/components/schemas/TaxonomyCategory'
        taxonomyCategoryIds:
          type: array
          writeOnly: true
          items:
            type: integer
            format: int64
        title:
          type: string
          description: The structured content's main title.
        title_i18n:
          type: object
          additionalProperties:
            type: string
        uuid:
          type: string
          description: A valid external identifier to reference this structured content.
          readOnly: true
        viewableBy:
          type: string
          writeOnly: true
          enum:
          - Anyone
          - Members
          - Owner
        x-class-name:
          type: string
          default: com.liferay.headless.delivery.dto.v1_0.StructuredContent
      xml:
        name: StructuredContent
    StructuredContentLink:
      type: object
      properties:
        contentType:
          type: string
          readOnly: true
        id:
          type: integer
          description: The resource's ID.
          format: int64
        title:
          type: string
          description: The resource's title.
        x-class-name:
          type: string
          default: com.liferay.headless.delivery.dto.v1_0.StructuredContentLink
      description: A link to structured content on the server.
      xml:
        name: StructuredContentLink
    Value:
      type: object
      properties:
        data:
          type: string
          description: The field's content for simple types.
        document:
          $ref: '#/components/schemas/ContentDocument'
        geo:
          $ref: '#/components/schemas/Geo'
        image:
          $ref: '#/components/schemas/ContentDocument'
        link:
          type: string
          description: A link to a page on the server.
        structuredContentLink:
          $ref: '#/components/schemas/StructuredContentLink'
        x-class-name:
          type: string
          default: com.liferay.headless.delivery.dto.v1_0.Value
      xml:
        name: Value
    WikiNode:
      type: object
      properties:
        actions:
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              type: string
          readOnly: true
        creator:
          $ref: '#/components/schemas/Creator'
        dateCreated:
          type: string
          description: The date the wiki node was created.
          format: date-time
          readOnly: true
        dateModified:
          type: string
          description: The last time any of the wiki node's fields changed.
          format: date-time
          readOnly: true
        description:
          type: string
          description: The wiki node's description.
        id:
          type: integer
          description: The wiki node's ID.
          format: int64
          readOnly: true
        name:
          type: string
          description: The wiki node's name.
        numberOfWikiPages:
          type: integer
          description: The number of child wiki page on this wiki node.
          format: int32
          readOnly: true
        siteId:
          type: integer
          description: The ID of the site to which this wiki node is scoped.
          format: int64
          readOnly: true
        subscribed:
          type: boolean
          readOnly: true
        viewableBy:
          type: string
          writeOnly: true
          enum:
          - Anyone
          - Members
          - Owner
        x-class-name:
          type: string
          default: com.liferay.headless.delivery.dto.v1_0.WikiNode
      xml:
        name: WikiNode
    PageWikiNode:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/WikiNode'
        totalCount:
          type: integer
          format: int64
        lastPage:
          type: integer
          format: int64
        page:
          type: integer
          format: int64
        pageSize:
          type: integer
          format: int64
        actions:
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              type: string
    WikiPageAttachment:
      type: object
      properties:
        contentUrl:
          type: string
          description: The file's relative URL.
          readOnly: true
        encodingFormat:
          type: string
          description: The file's media format (e.g., application/pdf, etc.).
          readOnly: true
        fileExtension:
          type: string
          description: The file's extension.
          readOnly: true
        id:
          type: integer
          description: The file's ID.
          format: int64
          readOnly: true
        sizeInBytes:
          type: integer
          description: The file's size in bytes.
          format: int64
          readOnly: true
        title:
          type: string
          description: The file's title.
        x-class-name:
          type: string
          default: com.liferay.headless.delivery.dto.v1_0.WikiPageAttachment
      xml:
        name: WikiPageAttachment
    PageWikiPageAttachment:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/WikiPageAttachment'
        totalCount:
          type: integer
          format: int64
        lastPage:
          type: integer
          format: int64
        page:
          type: integer
          format: int64
        pageSize:
          type: integer
          format: int64
        actions:
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              type: string
    PageWikiPage:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/WikiPage'
        totalCount:
          type: integer
          format: int64
        lastPage:
          type: integer
          format: int64
        page:
          type: integer
          format: int64
        pageSize:
          type: integer
          format: int64
        actions:
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              type: string
    WikiPage:
      required:
      - encodingFormat
      - headline
      type: object
      properties:
        actions:
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              type: string
          readOnly: true
        aggregateRating:
          $ref: '#/components/schemas/AggregateRating'
        content:
          type: string
          description: The wiki page's content.
        creator:
          $ref: '#/components/schemas/Creator'
        customFields:
          type: array
          items:
            $ref: '#/components/schemas/CustomField'
        dateCreated:
          type: string
          description: The date the wiki page was created.
          format: date-time
          readOnly: true
        dateModified:
          type: string
          description: The last time any of the wiki page's fields changed.
          format: date-time
          readOnly: true
        description:
          type: string
          description: The wiki page's description.
        encodingFormat:
          type: string
          description: The wiki page's media format (e.g., HTML, BBCode, etc.).
        headline:
          type: string
          description: The wiki page's main title.
        id:
          type: integer
          description: The wiki page's ID.
          format: int64
          readOnly: true
        keywords:
          type: array
          description: A list of keywords describing the blog post.
          items:
            type: string
            description: A list of keywords describing the blog post.
        numberOfAttachments:
          type: integer
          description: The wiki page's number attachments.
          format: int32
          readOnly: true
        numberOfWikiPages:
          type: integer
          description: The number of child wiki page on this wiki page.
          format: int32
          readOnly: true
        relatedContents:
          type: array
          readOnly: true
          items:
            $ref: '#/components/schemas/RelatedContent'
        siteId:
          type: integer
          description: The ID of the site to which this wiki page is scoped.
          format: int64
          readOnly: true
        subscribed:
          type: boolean
          readOnly: true
        taxonomyCategories:
          type: array
          description: The categories associated with this blog post.
          readOnly: true
          items:
            $ref: '#/components/schemas/TaxonomyCategory'
        taxonomyCategoryIds:
          type: array
          writeOnly: true
          items:
            type: integer
            format: int64
        viewableBy:
          type: string
          writeOnly: true
          enum:
          - Anyone
          - Members
          - Owner
        x-class-name:
          type: string
          default: com.liferay.headless.delivery.dto.v1_0.WikiPage
      xml:
        name: WikiPage
